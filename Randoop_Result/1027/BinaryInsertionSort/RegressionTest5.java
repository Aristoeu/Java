package BinaryInsertionSort;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort49.binaryInsertSort(intArray77);
        int[] intArray83 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray84 = binaryInsertionSort49.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort48.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort48.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort17.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass98 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort51.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort50.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass94 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort40.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort31.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort64.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort57.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort30.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort29.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray81);
        java.lang.Class<?> wildcardClass83 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort56.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass94 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort21.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort60.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort51.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort50.binaryInsertSort(intArray79);
        int[] intArray84 = new int[] { (byte) 10 };
        int[] intArray85 = binaryInsertionSort50.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort21.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass88 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort48.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort33.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray76);
        java.lang.Class<?> wildcardClass79 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass85 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort19.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort19.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
        java.lang.Class<?> wildcardClass73 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort0.binaryInsertSort(intArray46);
        int[] intArray50 = new int[] { 100, (byte) -1 };
        int[] intArray51 = binaryInsertionSort0.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort60.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray86);
        int[] intArray90 = binaryInsertionSort52.binaryInsertSort(intArray86);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass92 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort20.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort1.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort44.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort43.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass87 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort21.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort20.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort19.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort64.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort19.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort23.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort16.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort16.binaryInsertSort(intArray89);
        int[] intArray94 = binaryInsertionSort7.binaryInsertSort(intArray89);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort26.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort7.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort7.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort53.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray68);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort72.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort53.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort52.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort51.binaryInsertSort(intArray92);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort20.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort1.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort43.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort38.binaryInsertSort(intArray67);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        int[] intArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray73 = binaryInsertionSort0.binaryInsertSort(intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray63 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray64 = binaryInsertionSort29.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort66.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray69);
        java.lang.Class<?> wildcardClass72 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort57.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort38.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort7.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray94 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray95 = binaryInsertionSort89.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort88.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort81.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass53 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort46.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort39.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass79 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort46.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort39.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort31.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort0.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort87.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort78.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort47.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort60.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort53.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort22.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort1.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray81);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray41 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray42 = binaryInsertionSort7.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort7.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        int[] intArray22 = binaryInsertionSort14.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort24.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort23.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort14.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort7.binaryInsertSort(intArray42);
        int[] intArray46 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort47.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort47.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort76.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort67.binaryInsertSort(intArray95);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass99 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        java.lang.Class<?> wildcardClass41 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort8.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray34);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray89 = new int[] { 100, (byte) -1 };
        int[] intArray90 = binaryInsertionSort39.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        int[] intArray92 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100]");
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort27.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort20.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort20.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort19.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass53 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort32.binaryInsertSort(intArray59);
        int[] intArray63 = binaryInsertionSort25.binaryInsertSort(intArray59);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        java.lang.Class<?> wildcardClass65 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort30.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort21.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort52.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort21.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort90 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray95 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray96 = binaryInsertionSort90.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort83.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass99 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort56.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort22.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort21.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort2.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort1.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort54.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort45.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort45.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort29.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort59.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        int[] intArray79 = new int[] { (byte) 10, (byte) 10 };
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray79);
        java.lang.Class<?> wildcardClass81 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 10]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 10]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort30.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort29.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray94 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray95 = binaryInsertionSort89.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort82.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort73.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort36.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort29.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort29.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        java.lang.Class<?> wildcardClass41 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort63.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort62.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort33.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray41 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray42 = binaryInsertionSort7.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort7.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort45.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort36.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
        int[] intArray72 = new int[] { 1, (byte) 0, (short) 100, 'a', ' ', (byte) 0 };
        int[] intArray73 = binaryInsertionSort0.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray79);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 1, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 1, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        int[] intArray56 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray57 = binaryInsertionSort22.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort21.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort21.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort21.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        java.lang.Class<?> wildcardClass86 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort30.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort30.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort21.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray90);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort26.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort7.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort7.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort53.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray68);
        java.lang.Class<?> wildcardClass71 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort31.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort0.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort57.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort48.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort47.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort47.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        int[] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort41.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray82);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray63 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray64 = binaryInsertionSort29.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort66.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort23.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort22.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort15.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort46.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort45.binaryInsertSort(intArray74);
        int[] intArray79 = new int[] { (byte) 10 };
        int[] intArray80 = binaryInsertionSort45.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray79);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10]");
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort35.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray54);
        int[] intArray60 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray61 = binaryInsertionSort26.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort7.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort65.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort64.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort38.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort19.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort19.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray62);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort16.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort16.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort7.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort79.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort40.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort39.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort38.binaryInsertSort(intArray79);
        int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray82);
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort38.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort19.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort19.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray62);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort17.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort64.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort17.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass97 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
        int[] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray38);
        int[] intArray43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort76.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort67.binaryInsertSort(intArray95);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray57 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray58 = binaryInsertionSort23.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort22.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort22.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort15.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort15.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        int[] intArray34 = binaryInsertionSort16.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort15.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray71 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray72 = binaryInsertionSort37.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort36.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort36.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort15.binaryInsertSort(intArray82);
        int[] intArray91 = new int[] { '#', (byte) 10, (short) 0, (byte) -1, (byte) -1, 1 };
        int[] intArray92 = binaryInsertionSort15.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, 0, 1, 10, 35]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, 0, 1, 10, 35]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, 0, 1, 10, 35]");
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort42.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort33.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        int[] intArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort29.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray90);
        int[] intArray96 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray97 = binaryInsertionSort62.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort29.binaryInsertSort(intArray97);
        int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 52, 100]");
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort42.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort33.binaryInsertSort(intArray61);
        int[] intArray67 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray68 = binaryInsertionSort33.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort0.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort87.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort78.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort77.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort70.binaryInsertSort(intArray97);
        int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort48.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort17.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort17.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        java.lang.Class<?> wildcardClass67 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort0.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
        java.lang.Class<?> wildcardClass73 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort48.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort33.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray76);
        int[] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort30.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray56);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray78);
        java.lang.Class<?> wildcardClass81 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort29.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort29.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray72);
        java.lang.Class<?> wildcardClass75 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort51.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort50.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass94 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray81 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray82 = binaryInsertionSort47.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort46.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort39.binaryInsertSort(intArray81);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort56.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass94 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray57 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray58 = binaryInsertionSort23.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort22.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort22.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort15.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort15.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort46.binaryInsertSort(intArray74);
        int[] intArray80 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray81 = binaryInsertionSort46.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort45.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort45.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort36.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort30.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort21.binaryInsertSort(intArray49);
        int[] intArray55 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray56 = binaryInsertionSort21.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort57.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort21.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort53.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort17.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort15.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort48.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort15.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray81 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray82 = binaryInsertionSort47.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort46.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort39.binaryInsertSort(intArray81);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        java.lang.Class<?> wildcardClass86 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        int[] intArray36 = binaryInsertionSort18.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort17.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort8.binaryInsertSort(intArray36);
        int[] intArray42 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray43 = binaryInsertionSort8.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort7.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort7.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort0.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort76.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort46.binaryInsertSort(intArray75);
        int[] intArray80 = new int[] { (byte) 10 };
        int[] intArray81 = binaryInsertionSort46.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        java.lang.Class<?> wildcardClass83 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort34.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort34.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort33.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray72);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        int[] intArray34 = binaryInsertionSort16.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort15.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray71 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray72 = binaryInsertionSort37.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort36.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort36.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort15.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort30.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort21.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort52.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort21.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort90 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray95 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray96 = binaryInsertionSort90.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort83.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort29.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort29.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray72);
        java.lang.Class<?> wildcardClass75 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort31.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort0.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort87.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort78.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort47.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort49.binaryInsertSort(intArray77);
        int[] intArray83 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray84 = binaryInsertionSort49.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort48.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort48.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort17.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort35.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray54);
        int[] intArray60 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray61 = binaryInsertionSort26.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort7.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort65.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort64.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort16.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort16.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort7.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort79.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort25.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort64.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort57.binaryInsertSort(intArray92);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort15.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort48.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort15.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort53.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray94 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray95 = binaryInsertionSort89.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort88.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        int[] intArray36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort59.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort50.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort43.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray74);
        int[] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort51.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort50.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort31.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort9.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort9.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort77.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort58.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort9.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        int[] intArray46 = binaryInsertionSort28.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray81 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray82 = binaryInsertionSort47.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort28.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort21.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort20.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort20.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort19.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort52.binaryInsertSort(intArray80);
        int[] intArray86 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray87 = binaryInsertionSort52.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort19.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort32.binaryInsertSort(intArray59);
        int[] intArray63 = binaryInsertionSort25.binaryInsertSort(intArray59);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        int[] intArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = binaryInsertionSort0.binaryInsertSort(intArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort26.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort7.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort7.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort53.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray68);
        int[] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray81 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray82 = binaryInsertionSort47.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort46.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort39.binaryInsertSort(intArray81);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        java.lang.Class<?> wildcardClass86 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort46.binaryInsertSort(intArray75);
        int[] intArray80 = new int[] { (byte) 10 };
        int[] intArray81 = binaryInsertionSort46.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort17.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort58.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray84);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass89 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray79);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort21.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort60.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort51.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort50.binaryInsertSort(intArray79);
        int[] intArray84 = new int[] { (byte) 10 };
        int[] intArray85 = binaryInsertionSort50.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort21.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass88 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[10]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray41 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray42 = binaryInsertionSort7.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort7.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort7.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort61.binaryInsertSort(intArray89);
        int[] intArray95 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray96 = binaryInsertionSort61.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort7.binaryInsertSort(intArray95);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
        java.lang.Class<?> wildcardClass99 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort23.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort16.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort16.binaryInsertSort(intArray89);
        int[] intArray94 = binaryInsertionSort7.binaryInsertSort(intArray89);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray96 = new int[] {};
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort48.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort47.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort38.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort29.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort70.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort29.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort8.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray34);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray89 = new int[] { 100, (byte) -1 };
        int[] intArray90 = binaryInsertionSort39.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort46.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort39.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass79 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort29.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort60.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort60.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort59.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray89);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort34.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort34.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort33.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray72);
        java.lang.Class<?> wildcardClass75 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort23.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort16.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort16.binaryInsertSort(intArray89);
        int[] intArray94 = binaryInsertionSort7.binaryInsertSort(intArray89);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray96 = new int[] {};
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        int[] intArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort9.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort9.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort67.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort66.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort59.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort90 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray95 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray96 = binaryInsertionSort90.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort89.binaryInsertSort(intArray95);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort30.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort30.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort21.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray50 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray51 = binaryInsertionSort16.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort52.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort16.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort16.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray92);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort60.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort29.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort76.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort29.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass93 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort60.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort29.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort76.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort29.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort15.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort48.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort15.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort35.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort34.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort25.binaryInsertSort(intArray53);
        int[] intArray59 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray60 = binaryInsertionSort25.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort24.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort17.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort64.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort63.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort17.binaryInsertSort(intArray90);
        int[] intArray95 = binaryInsertionSort8.binaryInsertSort(intArray90);
        int[] intArray96 = binaryInsertionSort1.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort30.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort30.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort21.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray90);
        java.lang.Class<?> wildcardClass93 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort57.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray83);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass88 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort41.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        java.lang.Class<?> wildcardClass57 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort34.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort34.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort33.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray72);
        java.lang.Class<?> wildcardClass75 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort53.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort17.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort53.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass85 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort41.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort67.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort58.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort41.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray82);
        java.lang.Class<?> wildcardClass85 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort49.binaryInsertSort(intArray77);
        int[] intArray83 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray84 = binaryInsertionSort49.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort48.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort48.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort17.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort40.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort39.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort19.binaryInsertSort(intArray47);
        int[] intArray53 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray54 = binaryInsertionSort19.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort18.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort18.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort9.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort9.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort7.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort22.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort22.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort7.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort74.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort41.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass91 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort36.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort0.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort77.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort68.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort46.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort45.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort26.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort7.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass91 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort48.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort33.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort31.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort0.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort72.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort63.binaryInsertSort(intArray91);
        int[] intArray97 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray98 = binaryInsertionSort63.binaryInsertSort(intArray97);
        int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray97);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 52, 100]");
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort41.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort41.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort24.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort17.binaryInsertSort(intArray77);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass82 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort52.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort33.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort32.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort76.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort75.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort32.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort31.binaryInsertSort(intArray94);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        int[] intArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort30.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort29.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort20.binaryInsertSort(intArray48);
        int[] intArray54 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray55 = binaryInsertionSort20.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort19.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort19.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort18.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort18.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort17.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray87);
        int[] intArray90 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort46.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort45.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort26.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort7.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort48.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort33.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass79 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort30.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort21.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort52.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort21.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort90 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray95 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray96 = binaryInsertionSort90.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort83.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort18.binaryInsertSort(intArray85);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort18.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort52.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort33.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort32.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort76.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort75.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort32.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort31.binaryInsertSort(intArray94);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort46.binaryInsertSort(intArray74);
        int[] intArray80 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray81 = binaryInsertionSort46.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort45.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort45.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort36.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort67.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort49.binaryInsertSort(intArray86);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort35.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray54);
        int[] intArray60 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray61 = binaryInsertionSort26.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort7.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray62);
        int[] intArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort36.binaryInsertSort(intArray64);
        int[] intArray70 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray71 = binaryInsertionSort36.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray70);
        java.lang.Class<?> wildcardClass73 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort57.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort48.binaryInsertSort(intArray76);
        int[] intArray82 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray83 = binaryInsertionSort48.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort29.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort41.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort30.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort29.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray81);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort72.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort53.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort52.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort51.binaryInsertSort(intArray92);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort37.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort28.binaryInsertSort(intArray56);
        int[] intArray62 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray63 = binaryInsertionSort28.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort27.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort20.binaryInsertSort(intArray62);
        int[] intArray66 = binaryInsertionSort11.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort48.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort33.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass79 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray81 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray82 = binaryInsertionSort47.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort46.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort39.binaryInsertSort(intArray81);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray81);
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        int[] intArray56 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray57 = binaryInsertionSort22.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort21.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort21.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort0.binaryInsertSort(intArray67);
        int[] intArray76 = new int[] { '#', (byte) 10, (short) 0, (byte) -1, (byte) -1, 1 };
        int[] intArray77 = binaryInsertionSort0.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort78.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1, 0, 1, 10, 35]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 0, 1, 10, 35]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort68.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort17.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort58.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray84);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass89 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort30.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort21.binaryInsertSort(intArray49);
        int[] intArray55 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray56 = binaryInsertionSort21.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort57.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort21.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass88 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort59.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray85);
        int[] intArray89 = binaryInsertionSort51.binaryInsertSort(intArray85);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass91 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort16.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort16.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort9.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort78.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort9.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort16.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort16.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort7.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort79.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort24.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort17.binaryInsertSort(intArray77);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass82 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray63 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray64 = binaryInsertionSort29.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort66.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray94 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray95 = binaryInsertionSort89.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort88.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass98 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort4 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray9 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray10 = binaryInsertionSort4.binaryInsertSort(intArray9);
        int[] intArray11 = binaryInsertionSort3.binaryInsertSort(intArray9);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort13.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort13.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort12.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort3.binaryInsertSort(intArray31);
        int[] intArray37 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray38 = binaryInsertionSort3.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort2.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort2.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort1.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort52.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort51.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort54.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort54.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray64 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray65 = binaryInsertionSort30.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort29.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort29.binaryInsertSort(intArray75);
        int[] intArray79 = new int[] { 100, (byte) -1 };
        int[] intArray80 = binaryInsertionSort29.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray80);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        java.lang.Class<?> wildcardClass11 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort29.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort29.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort72.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort29.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass89 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort33.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort32.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort23.binaryInsertSort(intArray51);
        int[] intArray57 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray58 = binaryInsertionSort23.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort22.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort22.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort15.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort15.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort23.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort22.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort15.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort52.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort45.binaryInsertSort(intArray80);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray80);
        java.lang.Class<?> wildcardClass85 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort39.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort38.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort19.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort8.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray34);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray89 = new int[] { 100, (byte) -1 };
        int[] intArray90 = binaryInsertionSort39.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort20.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort1.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        int[] intArray73 = new int[] { (short) 10, (short) 100, 100, (byte) 0 };
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray73);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 10, 100, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 10, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort46.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort45.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort26.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort7.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort40.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort39.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray79);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort51.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort44.binaryInsertSort(intArray93);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
        java.lang.Class<?> wildcardClass99 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray69);
        int[] intArray75 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray76 = binaryInsertionSort41.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort41.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass94 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort9.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort9.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort77.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort58.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort9.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort36.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass54 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort21.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort53.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort44.binaryInsertSort(intArray72);
        int[] intArray78 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray79 = binaryInsertionSort44.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort43.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort36.binaryInsertSort(intArray78);
        int[] intArray82 = binaryInsertionSort21.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray82);
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort9.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort9.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort67.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort66.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort59.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort90 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray95 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray96 = binaryInsertionSort90.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort89.binaryInsertSort(intArray95);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort74.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort41.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort32.binaryInsertSort(intArray59);
        int[] intArray63 = binaryInsertionSort25.binaryInsertSort(intArray59);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        java.lang.Class<?> wildcardClass65 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort22.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort22.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort21.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort21.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort7.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort22.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort22.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort7.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort53.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass85 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort38.binaryInsertSort(intArray67);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort72.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort20.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort1.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        int[] intArray73 = new int[] { (short) 10, (short) 100, 100, (byte) 0 };
        int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray73);
        java.lang.Class<?> wildcardClass75 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 10, 100, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 10, 100, 100]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort53.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort44.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort0.binaryInsertSort(intArray72);
        int[] intArray76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = binaryInsertionSort0.binaryInsertSort(intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort37.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort36.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort54.binaryInsertSort(intArray82);
        int[] intArray88 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray89 = binaryInsertionSort54.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort53.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort36.binaryInsertSort(intArray88);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort37.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort1.binaryInsertSort(intArray65);
        int[] intArray73 = new int[] { 1, (byte) 0, (short) 100, 'a', ' ', (byte) 0 };
        int[] intArray74 = binaryInsertionSort1.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 1, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 1, 32, 97, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort74.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort41.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort23.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort22.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort15.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort52.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort45.binaryInsertSort(intArray80);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray80);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort22.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort21.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort2.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort1.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort54.binaryInsertSort(intArray83);
        int[] intArray87 = binaryInsertionSort45.binaryInsertSort(intArray83);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        int[] intArray46 = binaryInsertionSort28.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort27.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort18.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort17.binaryInsertSort(intArray46);
        int[] intArray51 = new int[] { (byte) 10 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        java.lang.Class<?> wildcardClass54 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass91 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort41.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort32.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort25.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort64.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort25.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        int[] intArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = binaryInsertionSort0.binaryInsertSort(intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort17.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort58.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray84);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort40.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort33.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort53.binaryInsertSort(intArray90);
        int[] intArray94 = binaryInsertionSort17.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort20.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort1.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort1.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort58.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort1.binaryInsertSort(intArray84);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray87);
        int[] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort41.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort41.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort18.binaryInsertSort(intArray85);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort18.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort54.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort54.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort37.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort28.binaryInsertSort(intArray56);
        int[] intArray62 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray63 = binaryInsertionSort28.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort27.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort20.binaryInsertSort(intArray62);
        int[] intArray66 = binaryInsertionSort11.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort1.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort1.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort1.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort78.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort77.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort63.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort62.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort33.binaryInsertSort(intArray92);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        java.lang.Class<?> wildcardClass97 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        int[] intArray47 = new int[] { (-1), (byte) 10, 10, (byte) 0, (-1), (short) 0 };
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray55);
        java.lang.Class<?> wildcardClass59 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1, 0, 0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1, 0, 0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort36.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort17.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort17.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort17.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray90);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort68.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        int[] intArray22 = binaryInsertionSort14.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort24.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort23.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort14.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort7.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort7.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        int[] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort67.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort49.binaryInsertSort(intArray86);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort25.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort67.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort58.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort25.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort25.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass93 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort51.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort50.binaryInsertSort(intArray77);
        int[] intArray81 = binaryInsertionSort43.binaryInsertSort(intArray77);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray81);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray43 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray44 = binaryInsertionSort9.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort45.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort9.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort9.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort36.binaryInsertSort(intArray64);
        int[] intArray70 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray71 = binaryInsertionSort36.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray70);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort59.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort50.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort43.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray74);
        java.lang.Class<?> wildcardClass77 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort33.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort29.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort29.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort72.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort29.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        int[] intArray89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort44.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort43.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray57);
        java.lang.Class<?> wildcardClass61 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray63 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray64 = binaryInsertionSort29.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
        int[] intArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = binaryInsertionSort0.binaryInsertSort(intArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort36.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort67.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort36.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray81);
        int[] intArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort24.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort17.binaryInsertSort(intArray77);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray77);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = binaryInsertionSort0.binaryInsertSort(intArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray64 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray65 = binaryInsertionSort30.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort1.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort0.binaryInsertSort(intArray65);
        java.lang.Class<?> wildcardClass68 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort41.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        java.lang.Class<?> wildcardClass57 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort41.binaryInsertSort(intArray82);
        int[] intArray85 = new int[] { 1 };
        int[] intArray86 = binaryInsertionSort41.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass88 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort9.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort53.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort25.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort67.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort58.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort25.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort25.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort42.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort33.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort65.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort19.binaryInsertSort(intArray47);
        int[] intArray53 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray54 = binaryInsertionSort19.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort0.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort76.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort28.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort28.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort19.binaryInsertSort(intArray82);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass87 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort41.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort41.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort23.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort22.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort15.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort52.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort45.binaryInsertSort(intArray80);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray80);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray94 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray95 = binaryInsertionSort89.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort88.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort79.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort70.binaryInsertSort(intArray96);
        int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray96);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort31.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort0.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort48.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort47.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort80.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort79.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort0.binaryInsertSort(intArray46);
        int[] intArray50 = new int[] { 100, (byte) -1 };
        int[] intArray51 = binaryInsertionSort0.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort63.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort62.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort52.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort52.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass94 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort40.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort31.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort67.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort66.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort57.binaryInsertSort(intArray85);
        int[] intArray91 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray92 = binaryInsertionSort57.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass94 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort26.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort26.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort19.binaryInsertSort(intArray47);
        int[] intArray53 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray54 = binaryInsertionSort19.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort0.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort76.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        int[] intArray36 = binaryInsertionSort18.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort17.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort8.binaryInsertSort(intArray36);
        int[] intArray42 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray43 = binaryInsertionSort8.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort7.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort63.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort62.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort46.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort87.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort86.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        java.lang.Class<?> wildcardClass86 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort57.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort56.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort47.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort46.binaryInsertSort(intArray75);
        int[] intArray80 = new int[] { (byte) 10 };
        int[] intArray81 = binaryInsertionSort46.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray80);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[10]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[10]");
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort0.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort64.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort63.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass81 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort41.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        java.lang.Class<?> wildcardClass57 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort36.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass54 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort29.binaryInsertSort(intArray36);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        java.lang.Class<?> wildcardClass41 = intArray39.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort62.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort43.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass79 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort33.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort33.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass77 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort60.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort41.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray73);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort41.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        java.lang.Class<?> wildcardClass57 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort15.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        int[] intArray43 = binaryInsertionSort25.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort24.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort15.binaryInsertSort(intArray43);
        int[] intArray49 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray50 = binaryInsertionSort15.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort14.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort7.binaryInsertSort(intArray49);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray49);
        int[] intArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort18.binaryInsertSort(intArray85);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort18.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort41.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort67.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort58.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort41.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray82);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort29.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort59.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        int[] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort21.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort51.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort50.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort21.binaryInsertSort(intArray80);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray83);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort40.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort31.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort64.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort57.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort41.binaryInsertSort(intArray82);
        int[] intArray85 = new int[] { 1 };
        int[] intArray86 = binaryInsertionSort41.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass88 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray68 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray69 = binaryInsertionSort34.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort33.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort26.binaryInsertSort(intArray68);
        int[] intArray72 = binaryInsertionSort19.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort0.binaryInsertSort(intArray71);
        java.lang.Class<?> wildcardClass74 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort33.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort48.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort33.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
        int[] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort41.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        int[] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort41.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass93 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort51.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort44.binaryInsertSort(intArray93);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        int[] intArray36 = binaryInsertionSort18.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort17.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort8.binaryInsertSort(intArray36);
        int[] intArray42 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray43 = binaryInsertionSort8.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort7.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort63.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort62.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort46.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort87.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort86.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort15.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        int[] intArray63 = binaryInsertionSort15.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray62);
        int[] intArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort63.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort62.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort55.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort9.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort9.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort30.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort1.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort61.binaryInsertSort(intArray89);
        int[] intArray95 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray96 = binaryInsertionSort61.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort60.binaryInsertSort(intArray95);
        int[] intArray98 = binaryInsertionSort1.binaryInsertSort(intArray95);
        int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 52, 100]");
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort4 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray9 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray10 = binaryInsertionSort4.binaryInsertSort(intArray9);
        int[] intArray11 = binaryInsertionSort3.binaryInsertSort(intArray9);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort13.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort13.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort12.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort3.binaryInsertSort(intArray31);
        int[] intArray37 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray38 = binaryInsertionSort3.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort2.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort2.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort1.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort1.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort72.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray87);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort37.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort36.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort78.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort69.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort36.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort42.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort33.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort65.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray68 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray69 = binaryInsertionSort34.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort33.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort26.binaryInsertSort(intArray68);
        int[] intArray72 = binaryInsertionSort19.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort0.binaryInsertSort(intArray71);
        int[] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = binaryInsertionSort0.binaryInsertSort(intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort4 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray9 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray10 = binaryInsertionSort4.binaryInsertSort(intArray9);
        int[] intArray11 = binaryInsertionSort3.binaryInsertSort(intArray9);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort13.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort13.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort12.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort3.binaryInsertSort(intArray31);
        int[] intArray37 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray38 = binaryInsertionSort3.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort2.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort2.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort1.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort52.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort51.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort57.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray83);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass88 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort37.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort36.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort29.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort65.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort29.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort33.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort33.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass77 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort80.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort71.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort70.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort51.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort50.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray90);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort36.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass54 = intArray53.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray33 = binaryInsertionSort1.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        int[] intArray43 = binaryInsertionSort1.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort44.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort1.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray58);
        java.lang.Class<?> wildcardClass61 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort26.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort26.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort22.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort22.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort21.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort21.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort37.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort28.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort19.binaryInsertSort(intArray56);
        int[] intArray66 = new int[] { (-1), (byte) 10, 10, (byte) 0, (-1), (short) 0 };
        int[] intArray67 = binaryInsertionSort19.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort68.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort19.binaryInsertSort(intArray94);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 0, 0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1, 0, 0, 10, 10]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort7.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        int[] intArray50 = binaryInsertionSort32.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort31.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort22.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort22.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort22.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort7.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort41.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray81);
        java.lang.Class<?> wildcardClass83 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort31.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort31.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        int[] intArray95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort52.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort43.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray88);
        java.lang.Class<?> wildcardClass91 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray69);
        java.lang.Class<?> wildcardClass72 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort49.binaryInsertSort(intArray77);
        int[] intArray83 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray84 = binaryInsertionSort49.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort48.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort48.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort17.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray95);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort25.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort67.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort58.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort25.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort25.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass93 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort40.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort33.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort0.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort64.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort63.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass81 = intArray77.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort53.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort17.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort40.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort31.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort0.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort67.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort66.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort57.binaryInsertSort(intArray85);
        int[] intArray91 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray92 = binaryInsertionSort57.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort35.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort25.binaryInsertSort(intArray54);
        int[] intArray59 = new int[] { (byte) 10 };
        int[] intArray60 = binaryInsertionSort25.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort0.binaryInsertSort(intArray59);
        int[] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[10]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[10]");
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort1.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort1.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort1.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort78.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort77.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort44.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort43.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray57);
        java.lang.Class<?> wildcardClass61 = intArray57.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort1.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort1.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort1.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort78.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort77.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray68 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray69 = binaryInsertionSort34.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort33.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort26.binaryInsertSort(intArray68);
        int[] intArray72 = binaryInsertionSort19.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort0.binaryInsertSort(intArray71);
        java.lang.Class<?> wildcardClass74 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort24.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort23.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort16.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort1.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort54.binaryInsertSort(intArray82);
        int[] intArray88 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray89 = binaryInsertionSort54.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort53.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort46.binaryInsertSort(intArray88);
        int[] intArray92 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass94 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort54.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort54.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray55 = binaryInsertionSort17.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort17.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort67.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort66.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort41.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray70);
        int[] intArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = binaryInsertionSort0.binaryInsertSort(intArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort59.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray85);
        int[] intArray89 = binaryInsertionSort51.binaryInsertSort(intArray85);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray85);
        int[] intArray93 = new int[] { 1, 1 };
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort57.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort48.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort41.binaryInsertSort(intArray76);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray76);
        java.lang.Class<?> wildcardClass81 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort46.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort46.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort45.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort36.binaryInsertSort(intArray64);
        int[] intArray70 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray71 = binaryInsertionSort36.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort17.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort17.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort17.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray92);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort30.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort21.binaryInsertSort(intArray49);
        int[] intArray55 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray56 = binaryInsertionSort21.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort57.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort21.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass88 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        int[] intArray51 = new int[] {};
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        int[] intArray73 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray74 = binaryInsertionSort39.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort38.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort38.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort7.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass88 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort29.binaryInsertSort(intArray36);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        java.lang.Class<?> wildcardClass41 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort28.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort28.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort19.binaryInsertSort(intArray82);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
        int[] intArray87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        int[] intArray20 = binaryInsertionSort2.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort1.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort42.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort33.binaryInsertSort(intArray61);
        int[] intArray64 = binaryInsertionSort0.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort65.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort41.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray81);
        java.lang.Class<?> wildcardClass83 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort0.binaryInsertSort(intArray79);
        java.lang.Class<?> wildcardClass83 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort31.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort22.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort22.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort21.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort63.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray89);
        int[] intArray93 = binaryInsertionSort21.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray61 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray62 = binaryInsertionSort56.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort55.binaryInsertSort(intArray61);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort65.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort64.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort54.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort54.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort33.binaryInsertSort(intArray62);
        int[] intArray67 = new int[] { (byte) 10 };
        int[] intArray68 = binaryInsertionSort33.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort0.binaryInsertSort(intArray67);
        int[] intArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[10]");
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray43 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray44 = binaryInsertionSort9.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        int[] intArray72 = binaryInsertionSort54.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort45.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort9.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort9.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort0.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort59.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort50.binaryInsertSort(intArray78);
        int[] intArray84 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray85 = binaryInsertionSort50.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort49.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 52, 100]");
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort29.binaryInsertSort(intArray58);
        int[] intArray63 = new int[] { (byte) 10 };
        int[] intArray64 = binaryInsertionSort29.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort0.binaryInsertSort(intArray64);
        java.lang.Class<?> wildcardClass66 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort9.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort9.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort67.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray82);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort8.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray34);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort49.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort40.binaryInsertSort(intArray68);
        int[] intArray74 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray75 = binaryInsertionSort40.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort39.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort39.binaryInsertSort(intArray85);
        int[] intArray89 = new int[] { 100, (byte) -1 };
        int[] intArray90 = binaryInsertionSort39.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass92 = intArray91.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray64 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray65 = binaryInsertionSort30.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort1.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort0.binaryInsertSort(intArray65);
        java.lang.Class<?> wildcardClass68 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray33 = binaryInsertionSort1.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        int[] intArray43 = binaryInsertionSort1.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort44.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort1.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray58);
        java.lang.Class<?> wildcardClass61 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort74.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort41.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort10.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort9.binaryInsertSort(intArray38);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort52.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort43.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort43.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        int[] intArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = binaryInsertionSort0.binaryInsertSort(intArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort9.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort8.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort1.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort52.binaryInsertSort(intArray87);
        int[] intArray91 = binaryInsertionSort1.binaryInsertSort(intArray87);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        int[] intArray51 = new int[] {};
        int[] intArray52 = binaryInsertionSort0.binaryInsertSort(intArray51);
        java.lang.Class<?> wildcardClass53 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort37.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort28.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort21.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort60.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort60.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort21.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort20.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort1.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray92);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort26.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort56.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort55.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort55.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort26.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort17.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass89 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort59.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort50.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort43.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        int[] intArray36 = binaryInsertionSort18.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort17.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort8.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort1.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort50.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort1.binaryInsertSort(intArray82);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass87 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort1.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort41.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray89);
        java.lang.Class<?> wildcardClass93 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort59.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray85);
        int[] intArray89 = binaryInsertionSort51.binaryInsertSort(intArray85);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray85);
        int[] intArray91 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort43.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort62.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort43.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass79 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort7.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort48.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort7.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray79);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort35.binaryInsertSort(intArray41);
        int[] intArray44 = binaryInsertionSort26.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort25.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort16.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort9.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort9.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort67.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray82);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort48.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort39.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort39.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray76);
        java.lang.Class<?> wildcardClass79 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort39.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
        int[] intArray96 = new int[] { (short) -1, 0, 'a', (short) 100, (byte) 0 };
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 0, 0, 97, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 0, 0, 97, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort51.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort44.binaryInsertSort(intArray93);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        int[] intArray47 = binaryInsertionSort29.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort28.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort9.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort8.binaryInsertSort(intArray48);
        int[] intArray51 = binaryInsertionSort1.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort52.binaryInsertSort(intArray87);
        int[] intArray91 = binaryInsertionSort1.binaryInsertSort(intArray87);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray87);
        java.lang.Class<?> wildcardClass93 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        int[] intArray36 = binaryInsertionSort18.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort17.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort8.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort1.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort1.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort69.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort50.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort1.binaryInsertSort(intArray82);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort24.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort23.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort16.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort1.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort54.binaryInsertSort(intArray82);
        int[] intArray88 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray89 = binaryInsertionSort54.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort53.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort46.binaryInsertSort(intArray88);
        int[] intArray92 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort8.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        int[] intArray26 = binaryInsertionSort8.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort7.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort69.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort60.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort29.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort0.binaryInsertSort(intArray91);
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort59.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort50.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort43.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass77 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        java.lang.Class<?> wildcardClass11 = intArray7.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort42.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort41.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray91);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort0.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort44.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort0.binaryInsertSort(intArray72);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort36.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort36.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort79.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort36.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray41 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray42 = binaryInsertionSort36.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort52.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort43.binaryInsertSort(intArray71);
        int[] intArray74 = binaryInsertionSort36.binaryInsertSort(intArray71);
        int[] intArray75 = binaryInsertionSort29.binaryInsertSort(intArray71);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        int[] intArray73 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray74 = binaryInsertionSort39.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort0.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort76.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort7.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort59.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort58.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort7.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray79);
        java.lang.Class<?> wildcardClass81 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort41.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort58.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort41.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray35 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray36 = binaryInsertionSort1.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        int[] intArray73 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray74 = binaryInsertionSort39.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort38.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        int[] intArray80 = new int[] { (byte) 10, (byte) 1, ' ' };
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray87);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 10, 32]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 10, 32]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        int[] intArray46 = binaryInsertionSort28.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort27.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort18.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort17.binaryInsertSort(intArray46);
        int[] intArray51 = new int[] { (byte) 10 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        java.lang.Class<?> wildcardClass54 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort2.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray37 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray38 = binaryInsertionSort32.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort31.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort2.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort1.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort1.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray55);
        java.lang.Class<?> wildcardClass59 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort42.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort33.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort0.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort0.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort87 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray92 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray93 = binaryInsertionSort87.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort86.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort77.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort68.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass99 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort78.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort69.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort68.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort59.binaryInsertSort(intArray87);
        int[] intArray93 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray94 = binaryInsertionSort59.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort40.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort33.binaryInsertSort(intArray95);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        int[] intArray18 = binaryInsertionSort0.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort20.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort19.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort50.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort41.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray88 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray89 = binaryInsertionSort83.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort82.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort73.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort72.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort41.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort26.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort17.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort0.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray69 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray70 = binaryInsertionSort64.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort63.binaryInsertSort(intArray69);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        int[] intArray81 = binaryInsertionSort63.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort62.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort53.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort52.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort52.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort43.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray94);
        java.lang.Class<?> wildcardClass97 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort16.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort7.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        int[] intArray52 = binaryInsertionSort44.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        int[] intArray62 = binaryInsertionSort44.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort43.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort34.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort33.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        int[] intArray75 = binaryInsertionSort33.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray75);
        int[] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray40 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray41 = binaryInsertionSort35.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort34.binaryInsertSort(intArray40);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        int[] intArray52 = binaryInsertionSort34.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort33.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort24.binaryInsertSort(intArray52);
        int[] intArray58 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray59 = binaryInsertionSort24.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort60.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort24.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort17.binaryInsertSort(intArray77);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray77);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray52 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray53 = binaryInsertionSort47.binaryInsertSort(intArray52);
        int[] intArray54 = binaryInsertionSort40.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort21.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort76.binaryInsertSort(intArray82);
        int[] intArray85 = binaryInsertionSort67.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort66.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort57.binaryInsertSort(intArray85);
        int[] intArray91 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray92 = binaryInsertionSort57.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort56.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort21.binaryInsertSort(intArray91);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass96 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray44 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray45 = binaryInsertionSort39.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort38.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        int[] intArray56 = binaryInsertionSort38.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort37.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort28.binaryInsertSort(intArray56);
        int[] intArray62 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray63 = binaryInsertionSort28.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort27.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort20.binaryInsertSort(intArray62);
        int[] intArray66 = binaryInsertionSort11.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort67.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        int[] intArray66 = binaryInsertionSort48.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort39.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        int[] intArray77 = binaryInsertionSort39.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort0.binaryInsertSort(intArray76);
        java.lang.Class<?> wildcardClass79 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        int[] intArray46 = binaryInsertionSort28.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort27.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort18.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort17.binaryInsertSort(intArray46);
        int[] intArray51 = new int[] { (byte) 10 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort0.binaryInsertSort(intArray52);
        java.lang.Class<?> wildcardClass54 = intArray53.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[10]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[10]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray48 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray49 = binaryInsertionSort43.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort42.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        int[] intArray70 = binaryInsertionSort52.binaryInsertSort(intArray69);
        int[] intArray71 = binaryInsertionSort51.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort42.binaryInsertSort(intArray70);
        int[] intArray73 = binaryInsertionSort41.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort41.binaryInsertSort(intArray82);
        int[] intArray85 = new int[] { 1 };
        int[] intArray86 = binaryInsertionSort41.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1]");
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort24.binaryInsertSort(intArray41);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort43 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort44 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray49 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray50 = binaryInsertionSort44.binaryInsertSort(intArray49);
        int[] intArray51 = binaryInsertionSort43.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray59 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray60 = binaryInsertionSort54.binaryInsertSort(intArray59);
        int[] intArray61 = binaryInsertionSort53.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort53.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort52.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort43.binaryInsertSort(intArray71);
        int[] intArray77 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray78 = binaryInsertionSort43.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort24.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort17.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort0.binaryInsertSort(intArray79);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 52, 100]");
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray22 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray23 = binaryInsertionSort17.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort16.binaryInsertSort(intArray22);
        int[] intArray25 = binaryInsertionSort7.binaryInsertSort(intArray24);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort35 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort35.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort26.binaryInsertSort(intArray54);
        int[] intArray60 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray61 = binaryInsertionSort26.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort7.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort0.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray71 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray72 = binaryInsertionSort66.binaryInsertSort(intArray71);
        int[] intArray73 = binaryInsertionSort65.binaryInsertSort(intArray71);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray90 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray91 = binaryInsertionSort85.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort84.binaryInsertSort(intArray90);
        int[] intArray93 = binaryInsertionSort75.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort74.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort65.binaryInsertSort(intArray93);
        int[] intArray96 = binaryInsertionSort64.binaryInsertSort(intArray93);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort36.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort36.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort79.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort36.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass96 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        int[] intArray23 = binaryInsertionSort9.binaryInsertSort(intArray22);
        int[] intArray24 = binaryInsertionSort0.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray31 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray32 = binaryInsertionSort26.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort25.binaryInsertSort(intArray31);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort34.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort25.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray74 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray75 = binaryInsertionSort69.binaryInsertSort(intArray74);
        int[] intArray76 = binaryInsertionSort68.binaryInsertSort(intArray74);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort78 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray83 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray84 = binaryInsertionSort78.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort77.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort68.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort59.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort58.binaryInsertSort(intArray85);
        int[] intArray89 = binaryInsertionSort51.binaryInsertSort(intArray85);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray85);
        int[] intArray93 = new int[] { 1, 1 };
        int[] intArray94 = binaryInsertionSort0.binaryInsertSort(intArray93);
        java.lang.Class<?> wildcardClass95 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray8 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray9 = binaryInsertionSort3.binaryInsertSort(intArray8);
        int[] intArray10 = binaryInsertionSort2.binaryInsertSort(intArray8);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray18 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray19 = binaryInsertionSort13.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort12.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        int[] intArray30 = binaryInsertionSort12.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort11.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort2.binaryInsertSort(intArray30);
        int[] intArray36 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray37 = binaryInsertionSort2.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort1.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        int[] intArray48 = binaryInsertionSort1.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort0.binaryInsertSort(intArray48);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort50.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort0.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort70.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort0.binaryInsertSort(intArray83);
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort29.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort29.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort72.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort29.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort9.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort59.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort38.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort9.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray69);
        int[] intArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = binaryInsertionSort0.binaryInsertSort(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort40.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray66);
        int[] intArray70 = binaryInsertionSort0.binaryInsertSort(intArray69);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        int[] intArray16 = binaryInsertionSort0.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort48.binaryInsertSort(intArray61);
        int[] intArray63 = binaryInsertionSort17.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray80 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray81 = binaryInsertionSort75.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort74.binaryInsertSort(intArray80);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort83 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort84 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray89 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray90 = binaryInsertionSort84.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort83.binaryInsertSort(intArray89);
        int[] intArray92 = binaryInsertionSort74.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort73.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort64.binaryInsertSort(intArray92);
        int[] intArray95 = binaryInsertionSort17.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort0.binaryInsertSort(intArray94);
        int[] intArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray14 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray15 = binaryInsertionSort9.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray33 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray34 = binaryInsertionSort28.binaryInsertSort(intArray33);
        int[] intArray35 = binaryInsertionSort27.binaryInsertSort(intArray33);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        int[] intArray45 = binaryInsertionSort27.binaryInsertSort(intArray44);
        int[] intArray46 = binaryInsertionSort26.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort17.binaryInsertSort(intArray45);
        int[] intArray51 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray52 = binaryInsertionSort17.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort16.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort9.binaryInsertSort(intArray51);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray63 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray64 = binaryInsertionSort58.binaryInsertSort(intArray63);
        int[] intArray65 = binaryInsertionSort57.binaryInsertSort(intArray63);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort57.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray83);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray83);
        java.lang.Class<?> wildcardClass88 = intArray87.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort61.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        int[] intArray79 = binaryInsertionSort61.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort0.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray86 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray87 = binaryInsertionSort81.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort89 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray94 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray95 = binaryInsertionSort89.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort88.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort81.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort0.binaryInsertSort(intArray96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort3 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort4 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray9 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray10 = binaryInsertionSort4.binaryInsertSort(intArray9);
        int[] intArray11 = binaryInsertionSort3.binaryInsertSort(intArray9);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort13 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort14 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray19 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray20 = binaryInsertionSort14.binaryInsertSort(intArray19);
        int[] intArray21 = binaryInsertionSort13.binaryInsertSort(intArray19);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray28 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray29 = binaryInsertionSort23.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort22.binaryInsertSort(intArray28);
        int[] intArray31 = binaryInsertionSort13.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort12.binaryInsertSort(intArray31);
        int[] intArray33 = binaryInsertionSort3.binaryInsertSort(intArray31);
        int[] intArray37 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray38 = binaryInsertionSort3.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort2.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        int[] intArray49 = binaryInsertionSort2.binaryInsertSort(intArray48);
        int[] intArray50 = binaryInsertionSort1.binaryInsertSort(intArray49);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray57 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray58 = binaryInsertionSort52.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort51.binaryInsertSort(intArray57);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort60.binaryInsertSort(intArray66);
        int[] intArray69 = binaryInsertionSort51.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort1.binaryInsertSort(intArray68);
        int[] intArray71 = binaryInsertionSort0.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort73.binaryInsertSort(intArray86);
        int[] intArray88 = binaryInsertionSort72.binaryInsertSort(intArray86);
        int[] intArray89 = binaryInsertionSort0.binaryInsertSort(intArray86);
        java.lang.Class<?> wildcardClass90 = intArray89.getClass();
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        int[] intArray28 = binaryInsertionSort10.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort9.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort0.binaryInsertSort(intArray28);
        int[] intArray34 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort36.binaryInsertSort(intArray42);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        int[] intArray53 = binaryInsertionSort45.binaryInsertSort(intArray51);
        int[] intArray54 = binaryInsertionSort36.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort0.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort66 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort66.binaryInsertSort(intArray72);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort75 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort76 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray81 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray82 = binaryInsertionSort76.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort75.binaryInsertSort(intArray81);
        int[] intArray84 = binaryInsertionSort66.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort65.binaryInsertSort(intArray84);
        int[] intArray86 = binaryInsertionSort56.binaryInsertSort(intArray84);
        int[] intArray87 = binaryInsertionSort0.binaryInsertSort(intArray86);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort88 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray93 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray94 = binaryInsertionSort88.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray12 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray13 = binaryInsertionSort7.binaryInsertSort(intArray12);
        int[] intArray14 = binaryInsertionSort0.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort15 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray20 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray21 = binaryInsertionSort15.binaryInsertSort(intArray20);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray29 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray30 = binaryInsertionSort24.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort23.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort32 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort32.binaryInsertSort(intArray38);
        int[] intArray41 = binaryInsertionSort23.binaryInsertSort(intArray40);
        int[] intArray42 = binaryInsertionSort22.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort15.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort0.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort45 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray50 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray51 = binaryInsertionSort45.binaryInsertSort(intArray50);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort52 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray58 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray59 = binaryInsertionSort53.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort52.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray77 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray78 = binaryInsertionSort72.binaryInsertSort(intArray77);
        int[] intArray79 = binaryInsertionSort71.binaryInsertSort(intArray77);
        int[] intArray80 = binaryInsertionSort62.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort61.binaryInsertSort(intArray80);
        int[] intArray82 = binaryInsertionSort52.binaryInsertSort(intArray80);
        int[] intArray83 = binaryInsertionSort45.binaryInsertSort(intArray80);
        int[] intArray84 = binaryInsertionSort0.binaryInsertSort(intArray80);
        int[] intArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray25 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray26 = binaryInsertionSort20.binaryInsertSort(intArray25);
        int[] intArray27 = binaryInsertionSort19.binaryInsertSort(intArray25);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort28 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray34 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray35 = binaryInsertionSort29.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort28.binaryInsertSort(intArray34);
        int[] intArray37 = binaryInsertionSort19.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort18.binaryInsertSort(intArray37);
        int[] intArray39 = binaryInsertionSort9.binaryInsertSort(intArray37);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray68 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray69 = binaryInsertionSort63.binaryInsertSort(intArray68);
        int[] intArray70 = binaryInsertionSort62.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort72 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray78 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray79 = binaryInsertionSort73.binaryInsertSort(intArray78);
        int[] intArray80 = binaryInsertionSort72.binaryInsertSort(intArray78);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort81 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort82 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray87 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray88 = binaryInsertionSort82.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort81.binaryInsertSort(intArray87);
        int[] intArray90 = binaryInsertionSort72.binaryInsertSort(intArray89);
        int[] intArray91 = binaryInsertionSort71.binaryInsertSort(intArray90);
        int[] intArray92 = binaryInsertionSort62.binaryInsertSort(intArray90);
        int[] intArray96 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray97 = binaryInsertionSort62.binaryInsertSort(intArray96);
        int[] intArray98 = binaryInsertionSort61.binaryInsertSort(intArray96);
        int[] intArray99 = binaryInsertionSort0.binaryInsertSort(intArray96);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 52, 100]");
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort60.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort41.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray73);
        java.lang.Class<?> wildcardClass77 = intArray73.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        int[] intArray10 = binaryInsertionSort0.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray42 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray43 = binaryInsertionSort37.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort30.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort11.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort68 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray73 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray74 = binaryInsertionSort68.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort67.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort58.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort57.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort48.binaryInsertSort(intArray76);
        int[] intArray82 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray83 = binaryInsertionSort48.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort47.binaryInsertSort(intArray82);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort85 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort85.binaryInsertSort(intArray91);
        int[] intArray94 = binaryInsertionSort47.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort46.binaryInsertSort(intArray94);
        int[] intArray96 = binaryInsertionSort11.binaryInsertSort(intArray94);
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray94);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort1.binaryInsertSort(intArray14);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray21 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray22 = binaryInsertionSort16.binaryInsertSort(intArray21);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort23 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort24 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort25 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray30 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray31 = binaryInsertionSort25.binaryInsertSort(intArray30);
        int[] intArray32 = binaryInsertionSort24.binaryInsertSort(intArray30);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort34 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray39 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray40 = binaryInsertionSort34.binaryInsertSort(intArray39);
        int[] intArray41 = binaryInsertionSort33.binaryInsertSort(intArray39);
        int[] intArray42 = binaryInsertionSort24.binaryInsertSort(intArray41);
        int[] intArray43 = binaryInsertionSort23.binaryInsertSort(intArray42);
        int[] intArray44 = binaryInsertionSort16.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort1.binaryInsertSort(intArray44);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray51 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray52 = binaryInsertionSort46.binaryInsertSort(intArray51);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort53 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort54 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort55 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray60 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray61 = binaryInsertionSort55.binaryInsertSort(intArray60);
        int[] intArray62 = binaryInsertionSort54.binaryInsertSort(intArray60);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort63 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort64 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort65 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray70 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray71 = binaryInsertionSort65.binaryInsertSort(intArray70);
        int[] intArray72 = binaryInsertionSort64.binaryInsertSort(intArray70);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort73 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort74 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray79 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray80 = binaryInsertionSort74.binaryInsertSort(intArray79);
        int[] intArray81 = binaryInsertionSort73.binaryInsertSort(intArray79);
        int[] intArray82 = binaryInsertionSort64.binaryInsertSort(intArray81);
        int[] intArray83 = binaryInsertionSort63.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort54.binaryInsertSort(intArray82);
        int[] intArray88 = new int[] { (byte) 0, '4', (byte) 100 };
        int[] intArray89 = binaryInsertionSort54.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort53.binaryInsertSort(intArray88);
        int[] intArray91 = binaryInsertionSort46.binaryInsertSort(intArray88);
        int[] intArray92 = binaryInsertionSort1.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort0.binaryInsertSort(intArray91);
        java.lang.Class<?> wildcardClass94 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 52, 100]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        int[] intArray34 = new int[] { (byte) 10 };
        int[] intArray35 = binaryInsertionSort0.binaryInsertSort(intArray34);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort36 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort37 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray43 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray44 = binaryInsertionSort38.binaryInsertSort(intArray43);
        int[] intArray45 = binaryInsertionSort37.binaryInsertSort(intArray43);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort46 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort47 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray53 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray54 = binaryInsertionSort48.binaryInsertSort(intArray53);
        int[] intArray55 = binaryInsertionSort47.binaryInsertSort(intArray53);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort56 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort57 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray62 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray63 = binaryInsertionSort57.binaryInsertSort(intArray62);
        int[] intArray64 = binaryInsertionSort56.binaryInsertSort(intArray62);
        int[] intArray65 = binaryInsertionSort47.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort46.binaryInsertSort(intArray65);
        int[] intArray67 = binaryInsertionSort37.binaryInsertSort(intArray65);
        int[] intArray68 = binaryInsertionSort36.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort69 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        int[] intArray77 = binaryInsertionSort69.binaryInsertSort(intArray75);
        int[] intArray78 = binaryInsertionSort36.binaryInsertSort(intArray77);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray84 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray85 = binaryInsertionSort79.binaryInsertSort(intArray84);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort86 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray91 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray92 = binaryInsertionSort86.binaryInsertSort(intArray91);
        int[] intArray93 = binaryInsertionSort79.binaryInsertSort(intArray92);
        int[] intArray94 = binaryInsertionSort36.binaryInsertSort(intArray93);
        int[] intArray95 = binaryInsertionSort0.binaryInsertSort(intArray93);
        int[] intArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray5 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray6 = binaryInsertionSort0.binaryInsertSort(intArray5);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort7 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort8 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray13 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray14 = binaryInsertionSort8.binaryInsertSort(intArray13);
        int[] intArray15 = binaryInsertionSort7.binaryInsertSort(intArray13);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort16 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort17 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray23 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray24 = binaryInsertionSort18.binaryInsertSort(intArray23);
        int[] intArray25 = binaryInsertionSort17.binaryInsertSort(intArray23);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort26 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort27 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray32 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray33 = binaryInsertionSort27.binaryInsertSort(intArray32);
        int[] intArray34 = binaryInsertionSort26.binaryInsertSort(intArray32);
        int[] intArray35 = binaryInsertionSort17.binaryInsertSort(intArray34);
        int[] intArray36 = binaryInsertionSort16.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort7.binaryInsertSort(intArray35);
        int[] intArray38 = binaryInsertionSort0.binaryInsertSort(intArray37);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort58 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort59 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray64 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray65 = binaryInsertionSort59.binaryInsertSort(intArray64);
        int[] intArray66 = binaryInsertionSort58.binaryInsertSort(intArray64);
        int[] intArray67 = binaryInsertionSort49.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort48.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort39.binaryInsertSort(intArray67);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort71 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray76 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray77 = binaryInsertionSort71.binaryInsertSort(intArray76);
        int[] intArray78 = binaryInsertionSort70.binaryInsertSort(intArray76);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort79 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort80 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray85 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray86 = binaryInsertionSort80.binaryInsertSort(intArray85);
        int[] intArray87 = binaryInsertionSort79.binaryInsertSort(intArray85);
        int[] intArray88 = binaryInsertionSort70.binaryInsertSort(intArray87);
        int[] intArray89 = binaryInsertionSort39.binaryInsertSort(intArray88);
        int[] intArray90 = binaryInsertionSort0.binaryInsertSort(intArray89);
        int[] intArray96 = new int[] { (short) -1, 0, 'a', (short) 100, (byte) 0 };
        int[] intArray97 = binaryInsertionSort0.binaryInsertSort(intArray96);
        java.lang.Class<?> wildcardClass98 = intArray97.getClass();
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 0, 0, 97, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, 0, 0, 97, 100]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray16 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray17 = binaryInsertionSort11.binaryInsertSort(intArray16);
        int[] intArray18 = binaryInsertionSort10.binaryInsertSort(intArray16);
        int[] intArray19 = binaryInsertionSort1.binaryInsertSort(intArray18);
        int[] intArray20 = binaryInsertionSort0.binaryInsertSort(intArray18);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort22 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray27 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray28 = binaryInsertionSort22.binaryInsertSort(intArray27);
        int[] intArray29 = binaryInsertionSort21.binaryInsertSort(intArray27);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        int[] intArray39 = binaryInsertionSort21.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray38);
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort31 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray36 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray37 = binaryInsertionSort31.binaryInsertSort(intArray36);
        int[] intArray38 = binaryInsertionSort30.binaryInsertSort(intArray36);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray46 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray47 = binaryInsertionSort41.binaryInsertSort(intArray46);
        int[] intArray48 = binaryInsertionSort40.binaryInsertSort(intArray46);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray55 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray56 = binaryInsertionSort50.binaryInsertSort(intArray55);
        int[] intArray57 = binaryInsertionSort49.binaryInsertSort(intArray55);
        int[] intArray58 = binaryInsertionSort40.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort39.binaryInsertSort(intArray58);
        int[] intArray60 = binaryInsertionSort30.binaryInsertSort(intArray58);
        int[] intArray61 = binaryInsertionSort29.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort62 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray67 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray68 = binaryInsertionSort62.binaryInsertSort(intArray67);
        int[] intArray69 = binaryInsertionSort29.binaryInsertSort(intArray68);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort70 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray75 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray76 = binaryInsertionSort70.binaryInsertSort(intArray75);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort77 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray82 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray83 = binaryInsertionSort77.binaryInsertSort(intArray82);
        int[] intArray84 = binaryInsertionSort70.binaryInsertSort(intArray83);
        int[] intArray85 = binaryInsertionSort29.binaryInsertSort(intArray83);
        int[] intArray86 = binaryInsertionSort0.binaryInsertSort(intArray83);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 1, 10, 97]");
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray6 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray7 = binaryInsertionSort1.binaryInsertSort(intArray6);
        int[] intArray8 = binaryInsertionSort0.binaryInsertSort(intArray6);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort9 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray15 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray16 = binaryInsertionSort10.binaryInsertSort(intArray15);
        int[] intArray17 = binaryInsertionSort9.binaryInsertSort(intArray15);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort18 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort19 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray24 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray25 = binaryInsertionSort19.binaryInsertSort(intArray24);
        int[] intArray26 = binaryInsertionSort18.binaryInsertSort(intArray24);
        int[] intArray27 = binaryInsertionSort9.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort0.binaryInsertSort(intArray26);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort29 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort30 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray35 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray36 = binaryInsertionSort30.binaryInsertSort(intArray35);
        int[] intArray37 = binaryInsertionSort29.binaryInsertSort(intArray35);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort38 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort39 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort40 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray45 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray46 = binaryInsertionSort40.binaryInsertSort(intArray45);
        int[] intArray47 = binaryInsertionSort39.binaryInsertSort(intArray45);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort48 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort49 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray54 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray55 = binaryInsertionSort49.binaryInsertSort(intArray54);
        int[] intArray56 = binaryInsertionSort48.binaryInsertSort(intArray54);
        int[] intArray57 = binaryInsertionSort39.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort38.binaryInsertSort(intArray57);
        int[] intArray59 = binaryInsertionSort29.binaryInsertSort(intArray57);
        int[] intArray60 = binaryInsertionSort0.binaryInsertSort(intArray59);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort61 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray66 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray67 = binaryInsertionSort61.binaryInsertSort(intArray66);
        int[] intArray68 = binaryInsertionSort0.binaryInsertSort(intArray67);
        java.lang.Class<?> wildcardClass69 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort0 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort1 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort2 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray7 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray8 = binaryInsertionSort2.binaryInsertSort(intArray7);
        int[] intArray9 = binaryInsertionSort1.binaryInsertSort(intArray7);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort10 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort11 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort12 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray17 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray18 = binaryInsertionSort12.binaryInsertSort(intArray17);
        int[] intArray19 = binaryInsertionSort11.binaryInsertSort(intArray17);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort20 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort21 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray26 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray27 = binaryInsertionSort21.binaryInsertSort(intArray26);
        int[] intArray28 = binaryInsertionSort20.binaryInsertSort(intArray26);
        int[] intArray29 = binaryInsertionSort11.binaryInsertSort(intArray28);
        int[] intArray30 = binaryInsertionSort10.binaryInsertSort(intArray29);
        int[] intArray31 = binaryInsertionSort1.binaryInsertSort(intArray29);
        int[] intArray32 = binaryInsertionSort0.binaryInsertSort(intArray29);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort33 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray38 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray39 = binaryInsertionSort33.binaryInsertSort(intArray38);
        int[] intArray40 = binaryInsertionSort0.binaryInsertSort(intArray39);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort41 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort42 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray47 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray48 = binaryInsertionSort42.binaryInsertSort(intArray47);
        int[] intArray49 = binaryInsertionSort41.binaryInsertSort(intArray47);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort50 = new com.thealgorithms.sorts.BinaryInsertionSort();
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort51 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray56 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray57 = binaryInsertionSort51.binaryInsertSort(intArray56);
        int[] intArray58 = binaryInsertionSort50.binaryInsertSort(intArray56);
        int[] intArray59 = binaryInsertionSort41.binaryInsertSort(intArray58);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort60 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray65 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray66 = binaryInsertionSort60.binaryInsertSort(intArray65);
        com.thealgorithms.sorts.BinaryInsertionSort binaryInsertionSort67 = new com.thealgorithms.sorts.BinaryInsertionSort();
        int[] intArray72 = new int[] { (short) 1, (short) 10, (-1), 'a' };
        int[] intArray73 = binaryInsertionSort67.binaryInsertSort(intArray72);
        int[] intArray74 = binaryInsertionSort60.binaryInsertSort(intArray73);
        int[] intArray75 = binaryInsertionSort41.binaryInsertSort(intArray73);
        int[] intArray76 = binaryInsertionSort0.binaryInsertSort(intArray73);
        java.lang.Class<?> wildcardClass77 = binaryInsertionSort0.getClass();
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 1, 10, 97]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }
}


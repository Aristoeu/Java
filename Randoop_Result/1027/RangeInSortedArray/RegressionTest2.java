package RangeInSortedArray;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray66 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 2, (int) '4', (int) (short) 0, intArray66, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, (int) 'a', 2, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 4, (int) (byte) -1, 1, intArray78, true);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (byte) 10, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray31 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, 100, (int) '#', (int) (short) 10, intArray31, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 1);
        int[] intArray45 = new int[] { ' ', (byte) -1 };
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray53, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray61, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray45, (-1), (int) ' ', (int) (byte) 10, intArray61, false);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 100);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) '4');
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray69, 1, (int) (byte) 1, (int) (short) -1, intArray75, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray39, 1, (int) (short) 1, 0, intArray75, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) 10, (int) (byte) 100, 100, intArray75, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 0);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) -1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) 'a');
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) '#', (int) '#', 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        java.lang.Class<?> wildcardClass81 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 4);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray60 = new int[] { '#' };
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (short) -1, 1, 2, intArray60, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, 2, (int) (byte) 1, intArray45, true);
        int[] intArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray45, (int) ' ', (int) (byte) 1, (int) (byte) 10, intArray70, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 3, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 98 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (-1));
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 100, (int) (short) 1, (int) (byte) 1, intArray36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        java.lang.Class<?> wildcardClass29 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        int[] intArray32 = new int[] { '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (short) -1, 1, 2, intArray32, true);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray88, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, 2, (int) (byte) 0, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', 1, (int) (byte) 0, intArray32, true);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, 2);
        java.lang.Class<?> wildcardClass99 = intArray98.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray14 = null;
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (-1), 2, (int) (byte) -1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, 10, (int) (byte) 100, (int) (short) -1, intArray44, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) 'a', 0, (int) (short) 100, intArray44, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 10);
        java.lang.Class<?> wildcardClass13 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 1, (int) '4', 1);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) 'a', 100, (int) (byte) 1, intArray42, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 10, 4, (int) (byte) 100, intArray42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 100, 2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 10, (int) (short) 1, intArray73, false);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        java.lang.Class<?> wildcardClass19 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) 100, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 100);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), (int) '4', (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) '4', 10, 4, intArray60, true);
        java.lang.Class<?> wildcardClass63 = intArray60.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        java.lang.Class<?> wildcardClass81 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray82, (int) (byte) 0, 2, (int) (short) 10, intArray86, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, 2);
        int[] intArray31 = new int[] { 10 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int[] intArray38 = new int[] { '#' };
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 0);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, 10, (int) (byte) 1, (int) (short) 0, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 0, 3, intArray38, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 4, (int) (byte) 100, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 2, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 100);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) (byte) 10, (int) (short) 1, 1, intArray70, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 100, (int) (byte) -1, (int) '#', intArray70, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass69 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 0, 1, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 1, (int) (short) 0, 0, intArray22, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), (int) '4', (int) (byte) 1);
        int[] intArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '#', 10, (int) 'a', intArray40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 100, (int) ' ', 0, intArray62, false);
        java.lang.Class<?> wildcardClass69 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 100, (int) (short) -1, 0, intArray72, false);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) 0, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray91, (int) (byte) 10, (int) (byte) 100, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 53 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '#', (int) '#', 4);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, 3, (int) (byte) -1);
        int[] intArray66 = new int[] { ' ', (byte) -1 };
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (-1), (int) ' ', (int) (byte) 10, intArray82, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 100);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 100);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray92, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (short) 10, (int) '4', (int) '4', intArray92, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) '4', 0, (int) (byte) 10, intArray74, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 100, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 26 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 0);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray53, true);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) -1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) -1);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 10, (int) '#', (int) '4', intArray87, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) (byte) 1, (int) (byte) 0, intArray52, true);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 10, (int) (short) 0, (int) (byte) 0);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', 100, (int) (byte) 1, intArray60, false);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) ' ', (int) (byte) 1, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (byte) 10, (int) (short) 0, 4, intArray60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray2 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 100);
        java.lang.Class<?> wildcardClass82 = intArray79.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 10);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int[] intArray28 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, 4, 0, intArray28, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 1, 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        java.lang.Class<?> wildcardClass77 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 10);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 100, (int) ' ', (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        int[] intArray4 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '4');
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 10, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 16 out of bounds for length 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, (int) (byte) 1, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 76 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 4 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 10);
        java.lang.Class<?> wildcardClass23 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) '#');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 10);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 2);
        int[] intArray56 = new int[] { ' ', (byte) -1 };
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (-1), (int) ' ', (int) (byte) 10, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 10);
        int[] intArray89 = new int[] { '#' };
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray82, 4, (int) '#', 1, intArray89, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', 0, intArray82, false);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 0, (int) (byte) 100, (int) (short) 1, intArray97, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[35]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 1, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 1, (int) (byte) 1, (int) (short) -1, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 10, (int) (short) 1, 1, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) '4', 1, (int) (short) 0, intArray82, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 10, 1, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 4, (int) ' ', (int) (short) 1, intArray36, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) 1, intArray40, true);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray51 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, 100, (int) '#', (int) (short) 10, intArray51, false);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray77, false);
        int[] intArray84 = new int[] { '#' };
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (short) -1, 1, 2, intArray84, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (short) 10, 2, (int) (byte) 1, intArray69, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '4', (int) (short) 1, intArray69, false);
        java.lang.Class<?> wildcardClass95 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '4', 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 1, (int) (byte) 100, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int[] intArray40 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) -1, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        java.lang.Class<?> wildcardClass15 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 22 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (byte) -1);
        java.lang.Class<?> wildcardClass83 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 10);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) 10, (int) '4', 10, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) (short) 100, (int) '#', intArray86, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, 10, (int) (short) 100, intArray50, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 0);
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 1, 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 53 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 0, (int) '4', (int) (short) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 1, 100, 4);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 1, 4, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        java.lang.Class<?> wildcardClass64 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) '#', 4, (int) (short) 0);
        java.lang.Class<?> wildcardClass81 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 2);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '#');
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray74, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) 'a', (int) (byte) 0, (int) '4', intArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) '4', (int) (byte) 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        java.lang.Class<?> wildcardClass21 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, (int) (short) 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass83 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) ' ');
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) 0, (int) (short) 1, (int) (byte) 100, intArray49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0]");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 0, (int) '4', (int) (short) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 1, 100, 4);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 1, 4, 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray80, 2, (int) '4', (int) (short) 0, intArray88, true);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (short) 1, (int) (byte) -1, 3, intArray80, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, 1, (int) (byte) 1, (int) (short) -1, intArray71, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 1, (int) (short) 1, 0, intArray71, false);
        java.lang.Class<?> wildcardClass80 = intArray35.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (short) 1);
        java.lang.Class<?> wildcardClass86 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        java.lang.Class<?> wildcardClass21 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray39 = new int[] { '#' };
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) -1, 1, 2, intArray39, true);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, 10);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) 0, (-1), (-1), intArray45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 0, (int) (byte) 100, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (short) 0, (int) ' ', 0, intArray26, true);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 0, 4, (int) (byte) 100, intArray48, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 52 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, 2, (-1), intArray72, true);
        java.lang.Class<?> wildcardClass77 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray35 = new int[] { 10 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) '4');
        int[] intArray42 = new int[] { '#' };
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 0);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, 10, (int) (byte) 1, (int) (short) 0, intArray42, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 2, 2, (int) (short) 10, intArray37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) (short) 100, (int) '#', (int) (short) 1, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (short) 10, (int) (byte) 1, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) 'a', (-1), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 100, 100, 10);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 1, (int) ' ', 2, intArray24, true);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray55 = new int[] { '#' };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) -1, 1, 2, intArray55, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '#');
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 4, (int) (byte) 100, 2);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 2, (int) (short) 10, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 0, (int) (byte) 0, (int) (byte) 100, intArray55, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray83 = new int[] { '#' };
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (short) -1, 1, 2, intArray83, true);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) (short) 100, 0, 1, intArray89, false);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, 100, (int) '#', (int) (byte) 1);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 1, 2, intArray56, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 1, (int) 'a', (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) 0, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 0);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (-1));
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) ' ', (int) 'a', 1, intArray82, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (-1), 0, intArray82, true);
        java.lang.Class<?> wildcardClass91 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        int[] intArray42 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 3, (int) (byte) -1, (int) 'a', intArray42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) '4', (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        java.lang.Class<?> wildcardClass27 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) -1, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) 1, intArray40, true);
        java.lang.Class<?> wildcardClass49 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 0, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 31 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, 1, (int) (byte) 1, (int) (short) -1, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 1, (int) (byte) 10, (int) (byte) 0, intArray78, true);
        java.lang.Class<?> wildcardClass81 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 0, (int) '4', (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (-1));
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 10, (-1), 10, intArray34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        java.lang.Class<?> wildcardClass85 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 0);
        java.lang.Class<?> wildcardClass82 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray32 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 10, (int) ' ', (int) (byte) 0, intArray32, true);
        java.lang.Class<?> wildcardClass35 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) '4', 2, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (-1), (int) '4', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 0, 2, 0, intArray66, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (byte) 0, (int) '4', (int) (short) 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (short) 1, 100, 4);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) (byte) 1, 4, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) (byte) -1, 2, intArray66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) -1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 4);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        java.lang.Class<?> wildcardClass35 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray32 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 10, (int) ' ', (int) (byte) 0, intArray32, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) '#', (int) 'a', (int) '#', intArray86, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 2, (int) (byte) 100, 100, intArray86, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 3);
        int[] intArray94 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 1, 10, 0, intArray94, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) '4');
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray72, 1, (int) (byte) 1, (int) (short) -1, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (short) 100, (int) (byte) -1, (int) '#', intArray78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 1, (int) '4', 1);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, (int) '#', (int) (byte) 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int[] intArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 100, (int) (short) 1, (int) (byte) 10, intArray77, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray13, 0, 4, (int) (short) 0, intArray52, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 1, (-1), (int) (byte) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 10, (int) 'a', (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), 1, (-1), intArray44, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) ' ', (int) 'a', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 10, (int) (short) 0, (int) (short) 100, intArray28, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) ' ');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 1, (int) (short) 10, (int) (short) 1, intArray85, true);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) -1);
        java.lang.Class<?> wildcardClass98 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 10, (int) '4', 10, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) ' ', 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) (byte) 0, 0, intArray74, true);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 3, (int) '#', 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) -1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 100, 3, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (short) 1);
        java.lang.Class<?> wildcardClass27 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        java.lang.Class<?> wildcardClass83 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 100);
        java.lang.Class<?> wildcardClass85 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (byte) 1, 2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 17 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { '#' };
        int int7 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray5, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 0, (int) (byte) -1, (int) '4', intArray5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[35]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 3, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 22 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass11 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '#');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 3, (int) '#', 4, intArray69, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, (int) (byte) 100, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) '4', (int) '4', (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 10, (int) (byte) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, (int) '4', (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (byte) 100, 100, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (byte) 0, (-1), 1);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) 1, (int) (byte) -1, (int) 'a', intArray62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 10, (int) 'a', (-1), intArray36, true);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '#');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) ' ');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 1, (int) ' ', (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 1, 0, 1, intArray28, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 1, (int) ' ', 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 100);
        java.lang.Class<?> wildcardClass69 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) -1);
        int[] intArray26 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (-1), (int) (short) 1, (int) (byte) -1, intArray26, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (int) (short) 10, (int) (byte) 10, 4, intArray26, true);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 10);
        int[] intArray52 = new int[] { ' ', (byte) -1 };
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (-1), (int) ' ', (int) (byte) 10, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, 0, (int) 'a', 4, intArray68, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, 3, 1, 2, intArray76, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 0, (int) (short) 1, (int) '4', intArray23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        java.lang.Class<?> wildcardClass81 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 1, (int) ' ', (int) (short) 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 4);
        java.lang.Class<?> wildcardClass69 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray65, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, 0, (int) (byte) 1, (-1), intArray87, true);
        java.lang.Class<?> wildcardClass90 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 3);
        java.lang.Class<?> wildcardClass85 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray60 = new int[] { '#' };
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (short) -1, 1, 2, intArray60, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, 2, (int) (byte) 1, intArray45, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 10, (int) (byte) 100, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 1, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (short) -1);
        java.lang.Class<?> wildcardClass58 = intArray51.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, 1, (int) (byte) 1, (int) (short) -1, intArray71, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 1, (int) (short) 1, 0, intArray71, false);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, (int) (short) 10);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, 10);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, (int) (short) 1);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray93, 10);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray93, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, 2, (int) (short) 100, (-1), intArray93, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray57 = new int[] { 10 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) '4');
        int[] intArray65 = new int[] { ' ', (byte) -1 };
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        int[] intArray79 = new int[] { (-1), 100 };
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray73, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray81, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (-1), (int) ' ', (int) (byte) 10, intArray81, false);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 0);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, (int) (byte) 0);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray87, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) (byte) 10, (int) (byte) 1, (int) (short) 10, intArray57, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) -1);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) 0, (int) 'a', 2);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, 10, 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) -1, 3, (int) (byte) 100, intArray60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) -1);
        java.lang.Class<?> wildcardClass23 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) ' ');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) '4', (int) '#', (int) (short) 1, intArray86, false);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) '4', (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (short) 0);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) 'a');
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 0);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) (byte) 100);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) 1, (int) (byte) 10, (int) (byte) -1, intArray88, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, (int) '#', (int) (byte) 1);
        java.lang.Class<?> wildcardClass72 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) (byte) 1, (int) (byte) 0, intArray52, true);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, (int) (short) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) 'a', 100, (int) (byte) 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) '4');
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) ' ', (int) (byte) 1, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) '#', (int) '#', 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) -1, 4, 0, intArray78, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) 'a', (int) (short) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 1, (-1), (int) (byte) 0);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 10, (int) 'a', (int) (short) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) 1, (int) 'a', 0, intArray68, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) 'a', (int) (byte) 1, (int) (byte) 0, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) '4', 100, (int) (short) 10, intArray26, true);
        java.lang.Class<?> wildcardClass79 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        java.lang.Class<?> wildcardClass65 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray31 = new int[] { ' ', (byte) -1 };
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray39, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray47, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (-1), (int) ' ', (int) (byte) 10, intArray47, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 100);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 1);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 0, (int) (short) 1, 3, intArray31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray57 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, 2, (int) '4', (int) (short) 0, intArray57, true);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) 'a');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, (int) ' ');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray85, 1, (int) (byte) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) 1, 2, (int) (short) -1, intArray85, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) -1, 4, 3, intArray85, false);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) (short) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 0);
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 10);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 10, 1, (int) (short) -1, intArray44, true);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 10, 1, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) 'a', (-1), intArray44, true);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        java.lang.Class<?> wildcardClass25 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 16 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 0);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray53, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) 100, (int) (short) 0, (int) (short) -1, intArray53, false);
        java.lang.Class<?> wildcardClass84 = intArray53.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 0);
        java.lang.Class<?> wildcardClass19 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 2);
        java.lang.Class<?> wildcardClass40 = intArray39.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 100);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (-1), (int) 'a', 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) -1, (int) '#', 100, intArray34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 4 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 0, (int) (byte) 100, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 0, 2, (int) (byte) 1, intArray28, true);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) (short) 0, 0, intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, 4);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) '#', 2, (int) (byte) -1, intArray40, false);
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 1);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (short) 100);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray92, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (short) 10, (-1), (int) (byte) 10, intArray92, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 4 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, 0, 2, 0, intArray56, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 2, 0, 0, intArray22, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 10);
        java.lang.Class<?> wildcardClass57 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray29, (int) (byte) 1, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', (int) '4', (-1));
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass73 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (short) 10);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray37, 0);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray37, 2);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 1);
        int[] intArray49 = new int[] { ' ', (byte) -1 };
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray65, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (-1), (int) ' ', (int) (byte) 10, intArray65, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 100);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray43, (int) (short) 1, (int) 'a', 3, intArray73, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 4, 4, (int) '4', intArray43, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 0, (int) (byte) 10, (int) (short) -1, intArray70, true);
        java.lang.Class<?> wildcardClass75 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) '#', (int) (short) 10, 0, intArray28, true);
        java.lang.Class<?> wildcardClass37 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        java.lang.Class<?> wildcardClass43 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        java.lang.Class<?> wildcardClass13 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, 1, (int) (byte) 1, (int) (short) -1, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 1, (int) (byte) 10, (int) (byte) 0, intArray78, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 100, (int) (byte) -1, (int) (byte) -1, intArray48, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 10, (int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, 100, 100, 4, intArray82, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) ' ');
        java.lang.Class<?> wildcardClass87 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (short) 0, (int) ' ', 0, intArray26, true);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 0, (-1));
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) (short) 100, 4);
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 10);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray90, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) (byte) 1, 0, intArray90, true);
        java.lang.Class<?> wildcardClass99 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 3, (int) (short) 10, (int) (byte) 10, intArray34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int[] intArray64 = new int[] { ' ', (byte) -1 };
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, (-1), (int) ' ', (int) (byte) 10, intArray80, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 100);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 10, 4, (int) ' ', intArray64, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 1, (int) 'a', (int) (byte) -1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 2, (int) (short) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        java.lang.Class<?> wildcardClass85 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 27 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) 1, (int) '#', 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        java.lang.Class<?> wildcardClass71 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 2);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 3, (int) (short) -1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 100);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) 10, (int) (short) -1, (int) (short) 10, intArray59, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 1]");
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) -1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) ' ', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 64 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) ' ', (int) (byte) 1, 0);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (short) 0, (int) (byte) 10, (int) (short) 1, intArray73, false);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, (int) (byte) 10, 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 51 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 1, (int) (byte) 10, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (byte) 100, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) -1, intArray58, true);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) 10, (int) 'a', (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 10, 0, 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '#', (int) (short) -1, (int) (short) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 100, (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) -1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (-1));
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) 100);
        java.lang.Class<?> wildcardClass32 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray65, 2, (int) (short) 100, (int) (short) 0);
        java.lang.Class<?> wildcardClass72 = intArray65.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        java.lang.Class<?> wildcardClass67 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) (byte) 10, (int) (byte) 10, intArray50, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) (byte) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 100);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) '4', (int) (byte) 10, 1, intArray59, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (-1), (int) '4', 0, intArray8, true);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 4, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '#');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (short) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) ' ', (int) (short) 1, (int) (short) 1, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) '4', (int) (short) 100, (int) (byte) 0, intArray64, true);
        java.lang.Class<?> wildcardClass79 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (short) -1, 1, 2, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, 2, (int) (byte) 1, intArray71, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) ' ', (-1), intArray71, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray96, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, (-1), 0);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (byte) 10, 3, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 3 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        java.lang.Class<?> wildcardClass53 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 10, 1, (int) (short) 0);
        java.lang.Class<?> wildcardClass73 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 1, (int) (byte) 100, 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        java.lang.Class<?> wildcardClass68 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 100, 2);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (-1), (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 50 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) 'a', (int) (byte) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, (int) (short) -1, 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 26 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 100, (int) (short) 0, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (short) 10);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) ' ', (int) 'a', (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (byte) 10, 1, (int) (byte) 1);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (short) 1, (int) 'a', (-1));
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 100, (int) '#', 100, intArray93, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 67 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '4');
        java.lang.Class<?> wildcardClass19 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) -1, (int) (byte) 100, (int) (short) 10, intArray68, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, (int) (short) 10, (int) (short) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), 10, (-1), intArray46, true);
        java.lang.Class<?> wildcardClass75 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) -1, (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 100);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, (int) (byte) 1);
        java.lang.Class<?> wildcardClass28 = intArray25.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        java.lang.Class<?> wildcardClass17 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, 0, 0, (int) (byte) 0, intArray22, true);
        java.lang.Class<?> wildcardClass31 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        java.lang.Class<?> wildcardClass76 = intArray75.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 10, (int) (byte) 100, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) 'a');
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) (byte) -1, (int) ' ', intArray82, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 100, (int) 'a', (int) (short) 0, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 10, (-1), intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) (byte) -1, 2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 51 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 100);
        java.lang.Class<?> wildcardClass82 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 3, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) 'a');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) ' ');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, 2, (int) (byte) 0, intArray45, false);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) (short) 10, (int) (byte) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (byte) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 10, 1, (int) (short) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, (int) '#', (int) '4', (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 0, (int) (byte) 100, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) -1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 100);
        java.lang.Class<?> wildcardClass29 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 1, (int) (short) 10, (int) '4', intArray34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 31 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (byte) 10, (int) 'a', 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (-1), (int) (byte) 0);
        int[] intArray32 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), 4, 2, intArray32, true);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) 10, 0, (int) (short) 0, intArray74, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 100, 10, (int) ' ', intArray20, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 21 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) -1, (int) (short) 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 10);
        java.lang.Class<?> wildcardClass69 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '#', (int) (short) 10, (int) (short) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '4', 2, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 51 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray26 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) '4', 0, (int) (short) 1, intArray26, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 100, 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (int) 'a', 100, (int) (byte) 1, intArray86, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (short) 100, (int) 'a', (int) (short) 0, intArray66, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) '#', (int) (short) -1, (int) (short) 1, intArray40, true);
        java.lang.Class<?> wildcardClass99 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 2);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', (-1), (int) (byte) 0);
        int[] intArray32 = new int[] { (byte) -1, 2, (short) 1, '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (-1), 4, 2, intArray32, true);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 4, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 15 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 2, 1, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '4', 100, (int) '#', intArray20, false);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (short) 100, (int) (short) 1, (int) (byte) -1, intArray58, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (byte) -1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray73 = new int[] { '#' };
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (short) -1, 1, 2, intArray73, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 10);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 0);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 0, 2, (int) (short) 1, intArray83, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 1, (-1), (int) (short) 1, intArray48, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray89, (-1), (int) (byte) 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 1, 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray43, false);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) ' ');
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 0);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray65, false);
        int[] intArray72 = new int[] { '#' };
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (short) -1, 1, 2, intArray72, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) (short) -1, 0, (int) (short) 0, intArray72, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, (int) '#', (int) 'a', 100, intArray82, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 98 out of bounds for length 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 0, (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 26 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) '4', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 76 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 4, (int) (byte) 100, 2);
        int[] intArray39 = new int[] { ' ', (byte) -1 };
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray55, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (-1), (int) ' ', (int) (byte) 10, intArray55, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) '#');
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 0, (int) (short) 0, (int) '4', intArray55, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (-1));
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) ' ', (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 35 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '4');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (-1), 1, 2);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 100, (int) (short) 100, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, 2, 10, intArray38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 10);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 10, (int) (byte) 10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        java.lang.Class<?> wildcardClass39 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (-1));
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray39, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray47, false);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) 'a');
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (-1));
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) '#');
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (byte) 10, (int) (short) 1, (int) 'a', intArray59, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        int[] intArray28 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray28, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) 'a');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray54 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 2, (int) '4', (int) (short) 0, intArray54, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '#');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) 'a', (int) 'a', (int) (byte) 1, intArray62, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) '4', (int) (short) 1, (int) (short) 100, intArray36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 2, (int) (short) 100, 1, intArray75, false);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        int[] intArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray75, (int) (short) -1, (-1), (int) (short) 1, intArray83, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot store to int array because \"range\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) 0, 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        java.lang.Class<?> wildcardClass29 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        int[] intArray32 = new int[] { '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (short) -1, 1, 2, intArray32, true);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray88, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, 2, (int) (byte) 0, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', 1, (int) (byte) 0, intArray32, true);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '#');
        java.lang.Class<?> wildcardClass99 = intArray1.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 100, 1, 0);
        java.lang.Class<?> wildcardClass67 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray56 = new int[] { '#' };
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) -1, 1, 2, intArray56, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 0, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 1, 2, (int) (short) 0, intArray70, false);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) ' ');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) -1);
        java.lang.Class<?> wildcardClass29 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 1, (int) (short) 100, (-1), intArray36, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        java.lang.Class<?> wildcardClass13 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray45 = new int[] { 10 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '4');
        int[] intArray52 = new int[] { '#' };
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, 10, (int) (byte) 1, (int) (short) 0, intArray52, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, 100, (int) (short) 1, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, 3, (int) (byte) 10, intArray68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 6 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) '#');
        java.lang.Class<?> wildcardClass96 = intArray95.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (byte) 100);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) '4');
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray57 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, 2, (int) '4', (int) (short) 0, intArray57, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray35, 3, (int) ' ', (int) (byte) 100, intArray49, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 66 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, (int) (byte) 0, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) 'a', (int) ' ', 1, intArray50, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) 'a');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (-1), 2, (int) '4', intArray52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        java.lang.Class<?> wildcardClass17 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray43, false);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) 'a');
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (-1));
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray49, (int) (byte) 100);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '4');
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (short) 10);
        int[] intArray67 = new int[] { ' ', (byte) -1 };
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray67, (-1), (int) ' ', (int) (byte) 10, intArray83, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, (int) ' ');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, 0, (int) '#', 0, intArray91, false);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, 0, (int) (byte) 100, (int) (byte) 10, intArray91, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 2, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 26 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        java.lang.Class<?> wildcardClass29 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, 3, 100, (int) (byte) 100, intArray82, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        java.lang.Class<?> wildcardClass59 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 100);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) -1, 3, (int) (byte) 10, intArray74, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) ' ');
        java.lang.Class<?> wildcardClass84 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, 10, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) 1, (int) (byte) 0, (-1), intArray68, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (short) 10);
        java.lang.Class<?> wildcardClass77 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) -1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (-1));
        java.lang.Class<?> wildcardClass33 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int int5 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (byte) 0);
        int[] intArray11 = new int[] { ' ', (byte) -1 };
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        int[] intArray25 = new int[] { (-1), 100 };
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray27, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (-1), (int) ' ', (int) (byte) 10, intArray27, false);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 1);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) 'a');
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) '#');
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, (int) (short) -1, 100, 10);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (-1), 1, (int) (byte) 0, intArray45, true);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 0, (int) (byte) 100, 1);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, 10, (int) (byte) 0, (int) (short) 10, intArray45, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 1, 0, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) 'a', 100, (int) (byte) 1, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (short) 100, (int) 'a', (int) (short) 0, intArray58, true);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (-1));
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, (int) (byte) 10, (-1), intArray32, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, 100);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 100);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) '4', (int) (byte) 10, 1, intArray55, false);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 0, (int) '#', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 43 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) 'a', 100, (int) (byte) 1, intArray62, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) '4');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) ' ', (int) (byte) 1, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 4, (int) '#', (int) (byte) 1, intArray62, false);
        java.lang.Class<?> wildcardClass79 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (byte) 1, 10, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, 10, (int) ' ', 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray72, (int) (short) 100, (-1), (int) '4', intArray82, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 25 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) 'a');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) 'a', (int) (byte) -1, 0, intArray32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 0, (int) (byte) 1, 3, intArray62, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 0, (int) (byte) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 100 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray60 = new int[] { '#' };
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (short) -1, 1, 2, intArray60, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 10, 2, (int) (byte) 1, intArray45, true);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 10, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        java.lang.Class<?> wildcardClass11 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 0, (int) '4', (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 0);
        java.lang.Class<?> wildcardClass27 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { (-1), 100 };
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray39, false);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray43, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray43, true);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, 2);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (byte) 1);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (short) 10);
        java.lang.Class<?> wildcardClass56 = intArray43.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 10);
        int int39 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int43 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 4, (int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        java.lang.Class<?> wildcardClass37 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 2, (int) '#', (int) (short) 0, intArray76, false);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (byte) 100, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 5 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) '#', (int) 'a', (int) '#', intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 0, 0, (-1), intArray48, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 2, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 55 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 3);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 0, 4, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 7 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 10, (int) ' ', 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 100);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) '4', 100, (int) '#', intArray40, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 1, (int) (byte) 1, 3, intArray40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, (int) '#', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 1, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 16 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) 'a', 2, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) -1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 0);
        int[] intArray52 = new int[] { ' ', (byte) -1 };
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (-1), (int) ' ', (int) (byte) 10, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) (short) 10, 1, (int) (short) -1, intArray74, true);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 10, 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) ' ', 3, (int) (short) 100, intArray74, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) ' ', 0, (int) (byte) -1, intArray86, false);
        java.lang.Class<?> wildcardClass89 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 10);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (byte) 100, 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) -1, intArray58, true);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        java.lang.Class<?> wildcardClass71 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) 'a', (int) (byte) -1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, 1, (int) (byte) 1, (int) (short) -1, intArray71, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 1, (int) (short) 1, 0, intArray71, false);
        java.lang.Class<?> wildcardClass80 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (byte) 100);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) 'a');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) ' ');
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray59, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (-1));
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray35, 10, (int) 'a', 0, intArray59, true);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (short) 10);
        java.lang.Class<?> wildcardClass72 = intArray71.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '4');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, 1, (int) (byte) 1, (int) (short) -1, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 1, 0, 0, intArray62, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) 0);
        java.lang.Class<?> wildcardClass75 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int int5 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) (byte) -1);
        java.lang.Class<?> wildcardClass6 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (byte) 100, 2, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray69 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, 100, (int) '#', (int) (short) 10, intArray69, false);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 0);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (short) -1, 0, (int) (byte) 0, intArray79, false);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 4);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 100, (int) '4', 0, intArray72, false);
        java.lang.Class<?> wildcardClass87 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, (int) (short) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) ' ', 0, (int) (byte) -1, intArray86, false);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, 10, (int) (short) 1, 1);
        java.lang.Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        java.lang.Class<?> wildcardClass67 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (short) 10);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray79, (int) (byte) 10, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 48 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (short) 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 2, (int) ' ', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, 3, (int) (short) -1, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        java.lang.Class<?> wildcardClass28 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 0);
        java.lang.Class<?> wildcardClass69 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, 2, (-1), intArray72, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) 10, (int) ' ', (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 0, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 25 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        java.lang.Class<?> wildcardClass81 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) 100);
        java.lang.Class<?> wildcardClass81 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 0);
        int[] intArray30 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 100, (int) ' ', (int) (byte) 0, intArray30, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        java.lang.Class<?> wildcardClass23 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray33 = new int[] { 10 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        int[] intArray40 = new int[] { '#' };
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 0);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (byte) 1, (int) (byte) 0, (int) (short) 1, intArray40, true);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (byte) 100, 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[10]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 2, (-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 15 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 1, 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 2 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 1, (-1), (int) (byte) 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 10, (int) 'a', (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 1, (-1), intArray34, true);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray66, 0, (int) (byte) 100, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 0, (int) (byte) 100, (int) (byte) 0, intArray66, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (short) 10);
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) '4', (int) (byte) 1, 0, intArray45, false);
        java.lang.Class<?> wildcardClass52 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) '4');
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        java.lang.Class<?> wildcardClass13 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, 1, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 4);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        int[] intArray94 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray88, 4, 0, (-1), intArray94, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray94, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        java.lang.Class<?> wildcardClass43 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        java.lang.Class<?> wildcardClass27 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 4, (int) (short) -1, (int) (short) 0, intArray48, true);
        java.lang.Class<?> wildcardClass53 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 4, 2, (int) (byte) 0, intArray26, false);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) 'a', (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, (int) (byte) 100, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass33 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) 'a', (int) (short) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 16 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) ' ', (int) (byte) 100, 4);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (byte) -1, (int) (short) -1, 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) ' ');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray86, false);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 0, (int) ' ', 0, intArray96, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, 2);
        java.lang.Class<?> wildcardClass64 = intArray57.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 49 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (short) -1, 3, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray31 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, 100, (int) '#', (int) (short) 10, intArray31, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 1);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (byte) 100);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) 'a');
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) ' ');
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (-1));
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, 10, (int) 'a', 0, intArray63, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) 'a', (int) (short) -1, 0, intArray63, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot load from int array because \"nums\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) ' ');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        java.lang.Class<?> wildcardClass32 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        java.lang.Class<?> wildcardClass70 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        java.lang.Class<?> wildcardClass25 = intArray22.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (-1));
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '#');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, 3, (int) (short) 1, 0, intArray84, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 10, 2, (int) ' ', intArray62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) ' ');
        java.lang.Class<?> wildcardClass37 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) 'a', (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int[] intArray78 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, (int) (byte) -1, 10, 0, intArray78, true);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray85, false);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 10, (int) 'a', (int) (short) 10, intArray22, true);
        java.lang.Class<?> wildcardClass31 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) -1);
        java.lang.Class<?> wildcardClass71 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '#');
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 3, (int) '#', 4, intArray69, false);
        java.lang.Class<?> wildcardClass78 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 1, (int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) -1);
        java.lang.Class<?> wildcardClass35 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) ' ', (int) (short) 0, 1);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray79, (int) (short) 100, (int) 'a', 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 4, (int) (short) 10, (int) (byte) 0);
        java.lang.Class<?> wildcardClass85 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1]");
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) '#', (int) '#', 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        java.lang.Class<?> wildcardClass83 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 1, 3, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) '#', (int) 'a', (int) '#', intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 0, 0, (-1), intArray48, false);
        java.lang.Class<?> wildcardClass77 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '4');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, 2, 10, (int) ' ', intArray58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int[] intArray95 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, (int) '#');
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray95, 0);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray97, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 100, 2, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (short) 1, 0, (int) (short) -1, intArray42, true);
        int[] intArray62 = new int[] { ' ', (byte) -1 };
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (-1), (int) ' ', (int) (byte) 10, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 100);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) '#', 0, (int) (short) 100, intArray92, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) -1, 2, (int) '#', intArray34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 18 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        java.lang.Class<?> wildcardClass55 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (-1), (int) 'a', 0);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 0, (int) (byte) -1, (int) (byte) -1, intArray86, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) '4');
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        java.lang.Class<?> wildcardClass30 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        java.lang.Class<?> wildcardClass19 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 100);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray29, 1, (int) (short) 100, 10);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) 'a');
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) ' ');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 0);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray67, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray75, false);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (int) ' ');
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (-1));
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray59, (int) ' ', (int) 'a', 1, intArray83, false);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (int) (short) 0, (int) (short) 10, (int) 'a', intArray59, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 53 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 0, (int) (byte) 100, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 0);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray1, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray31, false);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, (int) (short) 0, (int) (byte) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 10, (int) (byte) 100, 0, intArray62, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 10);
        java.lang.Class<?> wildcardClass81 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) -1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (byte) 10, (int) '4', 1);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 4, (int) '#', (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 2, 2, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) 100, (int) (short) 0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 1, (int) (byte) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), (int) (short) 1, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), 0, 1);
        java.lang.Class<?> wildcardClass45 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray55, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 0, (int) (byte) -1, intArray55, false);
        java.lang.Class<?> wildcardClass68 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, (int) (short) 0, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        java.lang.Class<?> wildcardClass73 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) 1, (int) ' ', (int) (byte) -1);
        java.lang.Class<?> wildcardClass88 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) 'a');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 0, (int) (short) 1, 0, intArray52, false);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (short) 1, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) -1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) '#', (int) ' ', intArray66, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (byte) 0, 10, (int) (short) 10, intArray38, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        java.lang.Class<?> wildcardClass48 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) '#', (-1), (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) (short) 10, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) -1, 0, 1, intArray69, false);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) -1, (int) (byte) -1, (int) (byte) 0, intArray16, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray49 = new int[] { '#' };
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray49, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (short) -1, 1, 2, intArray49, true);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 1);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', (int) 'a', (int) (short) 1, intArray57, false);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) ' ');
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray71, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray79 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray71, 2, (int) '4', (int) (short) 0, intArray79, true);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray71, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 1, (int) (short) 0, (int) (byte) 10, intArray87, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        java.lang.Class<?> wildcardClass31 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (short) 10, 0, (int) (short) 0, intArray56, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) (byte) 10, (int) '4', 0, intArray70, true);
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) -1, 3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, 4, (-1));
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '4', (int) 'a', 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        java.lang.Class<?> wildcardClass61 = intArray60.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 4);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        java.lang.Class<?> wildcardClass29 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (byte) 100, (int) (short) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 0, (int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray33 = new int[] { '#' };
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) -1, 1, 2, intArray33, true);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 10);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 0);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '#');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (short) 100, 0, (int) (byte) -1, intArray78, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 100, (int) (byte) -1, intArray33, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 0);
        java.lang.Class<?> wildcardClass87 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) -1, (int) (byte) -1, (int) (byte) 0, intArray16, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, 1, (int) (short) 1, intArray52, false);
        java.lang.Class<?> wildcardClass55 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) -1, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray45 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int49 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray45, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, 100, (int) '#', (int) (short) 10, intArray45, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 10, 4, intArray36, true);
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 10);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, 0, 0);
        java.lang.Class<?> wildcardClass55 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (-1));
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (-1), 100, 3, intArray30, true);
        java.lang.Class<?> wildcardClass41 = intArray8.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 1, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, 1, (int) (byte) 1, (int) (short) -1, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 1, (int) (byte) 10, (int) (byte) 0, intArray78, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 100);
        java.lang.Class<?> wildcardClass83 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        java.lang.Class<?> wildcardClass31 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 3, intArray68, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        java.lang.Class<?> wildcardClass87 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 2, 4, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (short) 0);
        java.lang.Class<?> wildcardClass77 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int[] intArray45 = new int[] { 10 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '4');
        int[] intArray52 = new int[] { '#' };
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, 10, (int) (byte) 1, (int) (short) 0, intArray52, false);
        int[] intArray63 = new int[] { 10 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        int[] intArray70 = new int[] { '#' };
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, 10, (int) (byte) 1, (int) (short) 0, intArray70, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, 0, 0, 1, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray47, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 2, (int) (short) 100, (int) (short) 10, intArray47, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[10]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 0);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray53, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) 100, (int) (short) 0, (int) (short) -1, intArray53, false);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray53, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', (int) (short) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 10, (int) (short) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 4);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) -1);
        int[] intArray26 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (-1), (int) (short) 1, (int) (byte) -1, intArray26, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (int) (short) 10, (int) (byte) 10, 4, intArray26, true);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (byte) 0, 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1]");
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        java.lang.Class<?> wildcardClass71 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) ' ');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) '4', (int) '#', (int) (short) 1, intArray86, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) 'a');
        java.lang.Class<?> wildcardClass13 = intArray10.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) '4', (int) (byte) 1, (int) (byte) 10, intArray78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) 10, (int) '4', 10, intArray54, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) (short) 100, (int) '#', intArray54, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) '4', 10);
        java.lang.Class<?> wildcardClass65 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        java.lang.Class<?> wildcardClass55 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) '4');
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (-1));
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, 0, (int) (short) 1, 0, intArray78, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) '#', (int) (byte) -1, 2, intArray52, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray5 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) 'a');
        int[] intArray11 = new int[] { ' ', (byte) -1 };
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        int[] intArray25 = new int[] { (-1), 100 };
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray27, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (-1), (int) ' ', (int) (byte) 10, intArray27, false);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, 100);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 0, (int) '#', 10, intArray33, false);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray33, (int) ' ', (int) (byte) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 1, (int) ' ', (int) (short) 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 4);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) (byte) 1, 0);
        java.lang.Class<?> wildcardClass73 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) 'a');
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        java.lang.Class<?> wildcardClass71 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '#');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) '#');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 2);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', (-1), (int) '4', intArray64, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 25 out of bounds for length 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray87 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray81, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray87, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 10, (int) (byte) 100, 0, intArray91, false);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        java.lang.Class<?> wildcardClass47 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 0, (int) '4', (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) ' ');
        java.lang.Class<?> wildcardClass39 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (int) 'a', (int) 'a', (int) '#');
        int[] intArray33 = new int[] { (-1), 100 };
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) (byte) 1);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray43, false);
        int[] intArray50 = new int[] { '#' };
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, (int) (short) -1, 1, 2, intArray50, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 10);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, 100, (int) (short) 0, (int) (short) 0, intArray50, false);
        java.lang.Class<?> wildcardClass63 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (short) 1, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray87, (int) (short) -1, (int) (byte) -1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '#');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) ' ', (int) (short) 100, 0, intArray16, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 100, 0, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 1, (-1), (int) (byte) 0);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, 10, (int) 'a', (int) (short) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (-1), intArray77, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray77, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray3, 4, (int) (short) 0, (-1));
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 10, (int) '4', 10, intArray52, true);
        int[] intArray62 = new int[] { ' ', (byte) -1 };
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (-1), (int) ' ', (int) (byte) 10, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 2, (int) 'a', 4, intArray84, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 2, 10, (int) (byte) 1, intArray84, false);
        java.lang.Class<?> wildcardClass91 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, (int) (short) 1, 0);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray57 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 100, (int) '#', (int) (short) 10, intArray57, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 1, (int) (byte) 0, intArray48, true);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 2, (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '#', (int) (short) 10, (int) (short) -1);
        java.lang.Class<?> wildcardClass41 = intArray4.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (byte) 10, 4, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        java.lang.Class<?> wildcardClass79 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }
}


package RangeInSortedArray;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, (int) '4', 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) (byte) 0, 1, (int) (short) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 3);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (int) (short) 10, (-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 100, 2);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 3, (int) (byte) 1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray79, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) -1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        java.lang.Class<?> wildcardClass81 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        int[] intArray0 = null;
        int[] intArray5 = new int[] { 10 };
        int[] intArray7 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray5, (int) '4');
        int[] intArray12 = new int[] { '#' };
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray7, 10, (int) (byte) 1, (int) (short) 0, intArray12, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 0, 1, 1, intArray12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[10]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        java.lang.Class<?> wildcardClass17 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 10);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 1, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) '4', 100, (int) '4', intArray70, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), 100, 0, intArray44, false);
        java.lang.Class<?> wildcardClass55 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray74, (int) '4', 1, (-1), intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 0);
        int[] intArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray86, (int) (short) 0, 4, 100, intArray94, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 100);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) 10, 100, (-1), intArray42, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray91, (int) (short) 10, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) (byte) 1, (int) (byte) 0, intArray74, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) ' ', (int) (byte) 10, intArray74, true);
        java.lang.Class<?> wildcardClass87 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (byte) 100);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) 'a');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) ' ');
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray59, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (-1));
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray35, 10, (int) 'a', 0, intArray59, true);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (short) 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray35, (int) (short) 0, (int) (short) 100, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) 'a', (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 1, (-1), (int) (byte) 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 10, (int) 'a', (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 3, (int) 'a', 1, intArray28, true);
        java.lang.Class<?> wildcardClass33 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 100, (int) 'a', (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        java.lang.Class<?> wildcardClass71 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray20, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 10, (int) '4', 10, intArray38, true);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) 'a', 4, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 1, (int) (short) -1, (int) (byte) 1, intArray70, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) 10, (int) '4', 10, intArray54, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) (short) 100, (int) '#', intArray54, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 100);
        java.lang.Class<?> wildcardClass65 = intArray64.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) ' ', (int) 'a', (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 10, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 100, (int) (short) 1, 0, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) -1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 0);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 10);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) '4');
        java.lang.Class<?> wildcardClass55 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 100, (int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (-1), (int) 'a', 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) ' ');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 100, (int) ' ', 0, intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) 'a');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) ' ', (int) (byte) 10, 0, intArray88, false);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, (int) (short) -1, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 1, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 1, (int) (short) 10, (-1), intArray24, true);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 10, (int) 'a', 4);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 0, (int) (short) 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (short) -1, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 2);
        int[] intArray36 = new int[] { 10 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 10, (int) (byte) 1, (int) (short) 0, intArray43, false);
        int[] intArray54 = new int[] { 10 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '4');
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 10, (int) (byte) 1, (int) (short) 0, intArray61, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, 0, 0, 1, intArray69, false);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) 'a', (int) (short) 100, (int) (byte) 10, intArray69, true);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 10, (int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 100, (int) (short) 0, 0);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 100, (int) ' ', (int) (byte) 1);
        java.lang.Class<?> wildcardClass39 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) ' ', 10, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 10, (int) (short) 1, 1, intArray32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 1]");
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        java.lang.Class<?> wildcardClass43 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, (int) (byte) -1, (int) 'a', (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray52 = new int[] { '#' };
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (short) -1, 1, 2, intArray52, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (short) 100, 0, (int) (byte) -1, intArray64, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) '#', (int) (short) 10, (int) (short) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 0, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) -1, 100, (int) (short) 0);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 10, (int) ' ', 10);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 0);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) '4', 100, (int) '#', intArray62, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 4, (int) (byte) 10, 10, intArray48, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) -1, 1, 2, intArray75, true);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) (short) 100, 0, 1, intArray81, false);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 0, 0, (int) (byte) 1, intArray48, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, 0);
        java.lang.Class<?> wildcardClass94 = intArray93.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (-1), 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) 'a');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 10);
        java.lang.Class<?> wildcardClass34 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray73 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 0, (int) (byte) 100, (int) '4', intArray73, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        java.lang.Class<?> wildcardClass80 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) (byte) 100, 4, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (short) -1, (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 10);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        java.lang.Class<?> wildcardClass61 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) ' ', (int) (short) 1, (int) (short) 1);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (short) 100);
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray63, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray71, false);
        int[] intArray78 = new int[] { '#' };
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray63, (int) (short) -1, 1, 2, intArray78, true);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, 10, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray55, (-1), 3, (int) ' ', intArray84, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (byte) -1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, 10);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray69, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 0, (int) (short) 0, (int) (short) -1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray51 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int55 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, 100, (int) '#', (int) (short) 10, intArray51, false);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (short) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray77, false);
        int[] intArray84 = new int[] { '#' };
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (short) -1, 1, 2, intArray84, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (short) 10, 2, (int) (byte) 1, intArray69, true);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 0);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, 2);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) ' ', 4, 100, intArray92, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 100, 1, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 100);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 1, 3, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 100);
        java.lang.Class<?> wildcardClass35 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, 1, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 4);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray90, 10);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray90, 3, (int) 'a', (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) '#', (int) (short) 10, 1, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 10);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 100, (int) (short) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 1);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (int) (short) 10, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) '4');
        int[] intArray88 = new int[] { (-1), 100 };
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray82, 1, (int) (byte) 1, (int) (short) -1, intArray88, false);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) '#', (int) (short) 0, (int) (byte) -1, intArray94, true);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray94, (int) (short) 1);
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        int[] intArray75 = new int[] { (-1), 100 };
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray69, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) 'a');
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) ' ');
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray57, (int) (byte) -1, (int) '#', (int) (short) 0, intArray85, false);
        java.lang.Class<?> wildcardClass88 = intArray85.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 0);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) ' ', 10, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 2, (int) ' ', (int) (byte) 100, intArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 10, (int) '4', 10, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) ' ', 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) (byte) 0, 0, intArray74, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 2, (int) (short) 100, 1);
        java.lang.Class<?> wildcardClass81 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), 10, (-1), intArray46, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) -1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 0);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) ' ');
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (-1));
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray87, (int) '#', (int) 'a', 10);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 1);
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray93, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) (byte) 0, 0, 0);
        int[] intArray71 = new int[] { 10 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) '4');
        int[] intArray78 = new int[] { '#' };
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray73, 10, (int) (byte) 1, (int) (short) 0, intArray78, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, 100, (int) (short) 100, 0, intArray78, true);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (int) (short) -1, (int) (byte) 100, intArray62, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray48 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 2, (int) '4', (int) (short) 0, intArray48, true);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) -1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 0);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, 2, 0, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, 0, 10, 2, intArray62, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 10, (int) (short) 1, (int) (byte) 10, intArray62, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) '#', (int) (byte) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) (byte) 10, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 10);
        int[] intArray56 = new int[] { ' ', (byte) -1 };
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (-1), (int) ' ', (int) (byte) 10, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (-1), 2, (int) (byte) -1);
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray80, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray88, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 1, (int) (short) 100, 2, intArray80, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (-1), (int) (byte) 0, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 100);
        java.lang.Class<?> wildcardClass87 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (short) 100, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, 2, 3, 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) -1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) 'a', 2, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray23 = new int[] { '#' };
        int int25 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray23, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) -1, 1, 2, intArray23, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, 0);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray63 = new int[] { (-1), 100 };
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (byte) 1);
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray65, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray73, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray53, (int) 'a', 100, (int) (byte) 1, intArray73, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray31, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray53, true);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) -1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) -1);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) ' ');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, (-1));
        int int95 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray91, (int) '#', (int) 'a', 10);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray91, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) -1, 1, (int) (short) 0, intArray91, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[1, 1]");
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (-1));
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (short) 0, (int) ' ', 0, intArray56, true);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, 0, 0, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, (int) (byte) 10, (int) (byte) -1, intArray56, false);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) 1, 4, (-1));
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        int[] intArray88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray82, (-1), 4, 4, intArray88, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) '#', (int) 'a', (int) '#', intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 0, 0, (-1), intArray48, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) 'a');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray43 = new int[] { '#' };
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (short) -1, 1, 2, intArray43, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 10);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray51, false);
        int[] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 0, 2, 4, intArray57, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 4, (int) '#', 1, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 100, (int) '#', 0, intArray56, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) 'a', (int) (byte) 0, (-1), intArray74, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 4);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 10);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) 'a');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (byte) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 4);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) -1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 10, (int) (byte) 0, (int) (short) 1, intArray62, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) 0, 100, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 2);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) (byte) -1, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        java.lang.Class<?> wildcardClass28 = intArray17.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 100, (int) (byte) 0, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (-1));
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (int) ' ', (int) 'a', 1, intArray84, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', 0, (-1), intArray90, true);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray90, (int) (short) 0, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (byte) 10, (int) (byte) -1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        java.lang.Class<?> wildcardClass29 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray56 = new int[] { '#' };
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) -1, 1, 2, intArray56, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 0, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 1, 2, (int) (short) 0, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', 100, (int) (byte) 1, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, (int) (short) 0, (int) (short) -1, intArray40, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (-1), (int) (short) 1, (int) (byte) 100, intArray80, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) 'a', 100, (int) (byte) 1, intArray62, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) '4');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) ' ', (int) (byte) 1, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 4, (int) '#', (int) (byte) 1, intArray62, false);
        java.lang.Class<?> wildcardClass79 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (byte) 100, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 100, (int) (byte) 100, 10);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) '#', 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 1, (int) (short) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, 3, (int) 'a', (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) (short) 0, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, 0, (int) (short) 0, intArray54, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) ' ', 10, 0);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 10);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (short) 1, (int) (byte) 0, (int) (byte) -1, intArray82, true);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) '#', 0, (int) (byte) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 2, (int) (short) 1, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 100, (int) 'a', (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '4');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, 1, (int) (byte) 1, (int) (short) -1, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 1, 0, 0, intArray62, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) -1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 100);
        java.lang.Class<?> wildcardClass75 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 4, (int) '#', 1, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 100, (int) '#', 0, intArray56, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), (int) (short) 1, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (-1), 0, 1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 3, (int) (short) 100, (int) (byte) -1, intArray76, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        java.lang.Class<?> wildcardClass49 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) 10);
        java.lang.Class<?> wildcardClass43 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 0, (int) (short) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 100);
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 2);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 1]");
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '#');
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 100, (int) (short) 100, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (short) 0, (int) 'a', 2);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) '4');
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray73, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) -1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 1);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 1, (int) (short) 10, (int) (byte) 1);
        java.lang.Class<?> wildcardClass81 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 3, 10, 4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        java.lang.Class<?> wildcardClass53 = intArray52.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) 10);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) ' ', (int) (short) -1, (int) (byte) 1, intArray52, false);
        int[] intArray62 = new int[] { ' ', (byte) -1 };
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (-1), (int) ' ', (int) (byte) 10, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) 'a');
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 0);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 0, (int) '4', (int) (byte) 1, intArray84, false);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-1, -1]");
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) ' ', (int) (byte) 1, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) (byte) -1, 0, intArray68, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) '4');
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 0, (int) (short) 10, 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (-1), (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (-1));
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 10, (int) (short) 10, 4);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 0, (int) (short) 1, (-1), intArray68, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, 100, (int) (short) -1, intArray36, true);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) (byte) 100, (int) '#', (int) ' ');
        java.lang.Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) 10, (int) '4', 10, intArray54, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) (short) 100, (int) '#', intArray54, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (byte) -1);
        java.lang.Class<?> wildcardClass65 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) 'a', (int) (byte) 100, (int) (short) 10);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass27 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int[] intArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, 1, (int) (short) 0, (int) 'a', intArray74, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 0);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) -1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 3, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        java.lang.Class<?> wildcardClass30 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int[] intArray42 = new int[] { ' ', (byte) -1 };
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (-1), (int) ' ', (int) (byte) 10, intArray58, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 10);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (-1), (int) 'a', 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 2);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, (int) (byte) 100, 100, (int) (short) 1, intArray76, false);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { 1, 'a' };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray44 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, (int) '4', (int) (short) 0, intArray44, true);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 0, (int) 'a', 2, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) '4', 10, 1, intArray56, true);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) '#', (int) (byte) -1, 1, intArray26, true);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, (int) 'a', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray23 = new int[] { 10 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) '4');
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) ' ', (int) 'a', (int) '#', intArray27, true);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (-1));
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, 0);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 10);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (short) 100);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray65, (-1), (int) 'a', 0);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) '#', (int) ' ', (int) 'a', intArray65, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 100);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        java.lang.Class<?> wildcardClass17 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 100);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, (-1), 2, (int) (byte) -1);
        int[] intArray62 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray62, false);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 10);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray76, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray84, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 0);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray90, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, 100, (int) ' ', 0, intArray90, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 0, (int) (byte) -1, 2, intArray54, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, 0, (int) (byte) 100, 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 0, 2, (int) (byte) 1, intArray28, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, 10, (int) (short) 1, (int) (short) 0, intArray22, false);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) ' ', (int) (byte) 1, 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) (byte) -1, 0, intArray68, false);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) 'a', (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', 3, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 100, 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass79 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, 1, (int) (byte) 1, (int) (short) -1, intArray58, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray85 = new int[] { '#' };
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (short) -1, 1, 2, intArray85, true);
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (int) (short) 100, 0, 1, intArray91, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 0, (int) (short) 100, (int) ' ', intArray91, true);
        int int97 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray91, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, 1, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, 3, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        java.lang.Class<?> wildcardClass38 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 2, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, 4);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (int) 'a', 100, (int) (byte) 1, intArray82, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) '4');
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 0, (int) (short) -1, 0, intArray82, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray13, 3, (int) (byte) 0, (int) (byte) 1, intArray82, false);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 10);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 4, (int) (short) 100, (int) (short) 0, intArray34, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) ' ');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 1, (int) (short) 10, (int) (short) 1, intArray85, true);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) -1);
        java.lang.Class<?> wildcardClass66 = intArray55.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 2, (int) (short) 100, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 100);
        java.lang.Class<?> wildcardClass55 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (-1));
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) (short) 10, 4);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, (int) (byte) 100, (int) (short) 1, intArray52, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) '4', (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 2, (int) (short) 100, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        java.lang.Class<?> wildcardClass41 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        java.lang.Class<?> wildcardClass33 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) 1, (int) (short) 100, 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 1, (-1), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) -1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) 'a');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 0);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (byte) 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, 4);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (short) -1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 0, 100, 0, intArray76, true);
        java.lang.Class<?> wildcardClass79 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, (int) (short) 100, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 2);
        int[] intArray47 = new int[] { 10 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) '4');
        int[] intArray54 = new int[] { '#' };
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, 10, (int) (byte) 1, (int) (short) 0, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 0, 10, 1, intArray49, true);
        java.lang.Class<?> wildcardClass63 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[10]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 10, (int) (byte) 100, 10);
        java.lang.Class<?> wildcardClass80 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) ' ');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) '4', (int) '#', (int) (short) 1, intArray86, false);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) 1, (int) ' ', (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        int[] intArray52 = new int[] { ' ', (byte) -1 };
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (-1), (int) ' ', (int) (byte) 10, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 10, 0, (int) (byte) -1, intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        java.lang.Class<?> wildcardClass87 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 0);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) ' ');
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '4');
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) -1);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (-1));
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, (-1), (int) '#', 4);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (int) (short) 100, (int) (short) 10, (int) (byte) -1, intArray65, false);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray33, 3, (int) (byte) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1]");
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray50 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 2, (int) '4', (int) (short) 0, intArray50, true);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) '#');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) 'a', (int) 'a', (int) (byte) 1, intArray58, true);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (short) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, 0, (int) (short) 100, (int) '4', intArray88, true);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) ' ');
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 0);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, (int) ' ', 10, 0);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, (int) (short) 100, (int) '#', intArray65, false);
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) ' ');
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray85 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray77, 2, (int) '4', (int) (short) 0, intArray85, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray77, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, (int) (short) -1, intArray77, false);
        int int99 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) -1, 3, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, 1, 10, (int) (short) 1);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) '#', (int) 'a', (int) (byte) 100, intArray40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) -1, (int) 'a', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (int) 'a', 100, (int) (byte) 1, intArray50, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '4');
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 0, (int) (short) -1, 0, intArray50, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 4);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (-1), (int) '#', 1, intArray84, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (short) -1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, 100, 100, 4, intArray82, false);
        java.lang.Class<?> wildcardClass85 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray71 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, (int) (byte) 0, (int) (byte) 10, (int) (short) -1, intArray71, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, (int) '#', (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) 1, (int) 'a', 0, intArray84, true);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, 3, 0, (int) 'a', intArray84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int[] intArray37 = new int[] { ' ', (byte) -1 };
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) ' ', (int) (byte) 10, intArray53, false);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 100);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 100);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 1);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) '4');
        int[] intArray71 = new int[] { ' ', (byte) -1 };
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray79, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray87, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray71, (-1), (int) ' ', (int) (byte) 10, intArray87, false);
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray87, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray37, (-1), (int) (byte) 1, (int) (byte) 0, intArray87, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (byte) 1, (int) '4', (int) (byte) 1, intArray87, true);
        int[] intArray99 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[-1, -1]");
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 10, (int) '4', 10, intArray48, true);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) (byte) -1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 4, (int) '#', 4, intArray22, false);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray81 = new int[] { '#' };
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray81, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (short) -1, 1, 2, intArray81, true);
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '#');
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, 10, (int) (short) 10, (int) '#', intArray87, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (int) 'a', 100, (int) (byte) 1, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, 10, (int) (short) 0, (int) (short) -1, intArray40, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, 10, (int) (short) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (-1));
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, 0, 0, intArray40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray53 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray53, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 100, (int) '#', (int) (short) 10, intArray53, false);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        int[] intArray77 = new int[] { (-1), 100 };
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray79, false);
        int[] intArray86 = new int[] { '#' };
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray71, (int) (short) -1, 1, 2, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, 2, (int) (byte) 1, intArray71, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) ' ', (-1), intArray71, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        java.lang.Class<?> wildcardClass97 = intArray96.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 2);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, 0, 3, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (int) (byte) 10, (int) 'a', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '#');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (byte) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) 'a', 0, 1);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 10, (int) '#', (int) ' ', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 100);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (byte) -1, (int) (byte) 100, (int) (short) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) -1, 3, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (-1));
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (int) ' ', (int) 'a', 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) '4');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 0, 10, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) 1, (int) (byte) 0, (-1), intArray72, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) '4', (int) (byte) 10, (int) (byte) 0, intArray46, true);
        java.lang.Class<?> wildcardClass83 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) ' ', (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) 10, (int) (short) 0, (int) (short) 1, intArray48, true);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 100, (int) (short) 0, (int) (byte) 1, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (-1));
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray78, (int) (short) 0, (int) (short) 10, 2, intArray88, false);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) 'a');
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 1, 10, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) '4');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (int) '#', 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, 100, (int) (short) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, 100, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) -1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, (int) (short) 10, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (int) (byte) 1, 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 0, 100, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 100, (int) (short) 1, 0, intArray40, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) (short) 100, (int) '#', (int) (short) -1, intArray74, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 3);
        java.lang.Class<?> wildcardClass81 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) -1);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 1);
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) '4');
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, 1, (int) (byte) 1, (int) (short) -1, intArray52, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, 10, 100, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) 0);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) ' ', (int) (short) -1, (int) (byte) 1, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) '4', (int) (byte) 1, (int) (short) 1, intArray78, false);
        java.lang.Class<?> wildcardClass81 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 10, (int) '4', 10, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) ' ', 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) (byte) 0, 0, intArray74, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 0, (int) (short) 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 0, (int) (short) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 3, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, 0);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 4);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 100, (int) '4', 0, intArray72, false);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (short) 10, (int) (byte) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 4);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) ' ');
        java.lang.Class<?> wildcardClass41 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) 10, (int) '4', 10, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 100, (int) ' ', 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) 100, 0, (int) (short) 1, intArray82, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 2);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) (short) 1, 0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 0);
        int[] intArray80 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, 10, (int) ' ', 4, intArray80, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) 'a');
        java.lang.Class<?> wildcardClass31 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) 'a');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) ' ');
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, (int) (byte) 10);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray94, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 10, (int) '4', (int) (byte) 0, intArray94, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) '#');
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) 'a');
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, (int) (byte) 100, (int) (byte) 100, (int) ' ');
        java.lang.Class<?> wildcardClass36 = intArray31.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) -1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (int) 'a', 100, (int) (byte) 1, intArray82, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 100, (int) 'a', (int) (short) 0, intArray62, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (byte) 0);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) -1);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray94, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (short) 10, 0, 2, intArray96, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0]");
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 100);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 0, (int) (byte) 100, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 0, (-1), 1, intArray55, false);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int6 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 100);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 0, (int) (byte) 0, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (byte) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        java.lang.Class<?> wildcardClass29 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) ' ', (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '#');
        int[] intArray62 = new int[] { ' ', (byte) -1 };
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (-1), (int) ' ', (int) (byte) 10, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (-1), 2, (int) (byte) -1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) ' ', (int) 'a', (int) (short) 10, intArray86, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 10);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        java.lang.Class<?> wildcardClass27 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (int) 'a', 100, (int) (byte) 1, intArray66, false);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) '4');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 10, (int) '#', 0, intArray66, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, 100);
        java.lang.Class<?> wildcardClass83 = intArray66.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray56 = new int[] { '#' };
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) -1, 1, 2, intArray56, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 0, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 1, 2, (int) (short) 0, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray59 = new int[] { 10 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) '4');
        int[] intArray67 = new int[] { ' ', (byte) -1 };
        int[] intArray73 = new int[] { (-1), 100 };
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 1);
        int[] intArray81 = new int[] { (-1), 100 };
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray75, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray83, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray67, (-1), (int) ' ', (int) (byte) 10, intArray83, false);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray83, 0);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, (int) (byte) 0);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray89, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray89, false);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray89, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, 1, 0, (int) (short) 100, intArray89, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[10]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) 'a');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (int) (byte) -1, (int) (byte) 10, (-1), intArray56, true);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (short) -1, (int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (short) 0, (-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 2);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 0, (int) (short) -1, 0, intArray72, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) ' ', 1, (int) 'a', intArray72, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) '#', 4, (int) (short) 0);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) -1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) '#', 4, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 2);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) -1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 10, (int) '#', 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 2, 4, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (-1), (int) (byte) 0, (int) (byte) 1, intArray31, false);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray57 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, 2, (int) '4', (int) (short) 0, intArray57, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, 1, (int) (byte) 100, (int) (byte) 0, intArray49, false);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray31, (int) (short) 0, (int) (byte) 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 100);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, 1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) 10, (int) '4', 1, intArray78, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 100, 100, 4);
        java.lang.Class<?> wildcardClass87 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray42 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) '4', (int) (byte) 0, (int) (byte) 0, intArray42, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, 1, (int) (byte) 1, (int) (short) -1, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 10, 100, (int) '#');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 0);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 1, 10, (int) (byte) 0, intArray70, true);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, 100, (int) (byte) -1, (int) (short) 0, intArray48, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 10);
        java.lang.Class<?> wildcardClass79 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (byte) 100, (int) '#', 4);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 10);
        java.lang.Class<?> wildcardClass15 = intArray14.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (byte) 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '4', 100, (int) '#', intArray20, false);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, 10);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (short) 100, (int) (short) 1, (int) (byte) -1, intArray58, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '#');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (short) -1, 100, 10);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, (int) (byte) 10, (int) (byte) -1, intArray46, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) 1, (int) (short) 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 2, 4, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray85 = new int[] { (-1), 100 };
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) (byte) 1);
        int[] intArray89 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (int) ' ');
        int[] intArray91 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 10);
        int int93 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray85, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 1, (int) (short) 10, (int) (short) 1, intArray85, true);
        int[] intArray97 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[-1, -1]");
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) 10, (int) '4', 10, intArray54, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) (short) 100, (int) '#', intArray54, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) '4', 10);
        int[] intArray68 = null;
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray76, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray84, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) ' ');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, 10, (int) (short) 1, (int) (short) 0, intArray90, false);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, 0);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray90, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) '#', (int) (byte) 1, 4, intArray90, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 10);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 100, (int) ' ', 0, intArray62, false);
        java.lang.Class<?> wildcardClass69 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) -1, 10, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray33 = new int[] { '#' };
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) -1, 1, 2, intArray33, true);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 10);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 0);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, (int) '#');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (short) 100, 0, (int) (byte) -1, intArray78, true);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 10, (int) (byte) 100, (int) (byte) -1, intArray33, false);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (short) 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, (int) (byte) 100);
        java.lang.Class<?> wildcardClass89 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) '#', (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 3);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, (int) (short) 0, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 100);
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (-1), 2, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 0, 2, 0, intArray52, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (-1), (-1), 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 1, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 0, 10, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 10);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        java.lang.Class<?> wildcardClass25 = intArray24.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) 'a', 4, (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) 1, (-1), (int) (short) 1, intArray74, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) '4');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 100, (int) (byte) 100, (int) (short) 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, 10, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) 1, (int) (byte) 0, (-1), intArray68, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        java.lang.Class<?> wildcardClass85 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        java.lang.Class<?> wildcardClass51 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 4);
        int[] intArray79 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray75, 10, 4, (int) (short) 10, intArray79, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, (int) (byte) 100, (int) ' ', 10);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        int[] intArray51 = new int[] { (-1), 100 };
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray53, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) 'a');
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) ' ');
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 10);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) ' ');
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 0);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, 1, (int) (byte) 1, 4, intArray63, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 1, (int) (byte) 100, 3);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (-1), (int) (short) 100, (int) (short) 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 100);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        java.lang.Class<?> wildcardClass91 = intArray90.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, 0, 2, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, 0, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) '4');
        java.lang.Class<?> wildcardClass45 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, 2);
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray33, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 2);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '#');
        java.lang.Class<?> wildcardClass73 = intArray72.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray33, (int) (byte) 0, (int) (short) 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 1);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (short) 100);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 0, (int) 'a', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) 'a');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (-1));
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), 0, (int) (short) -1, intArray58, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, (int) (byte) 100, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 1]");
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 0, (int) (byte) 100, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) '#', (int) (short) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 10);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) 'a');
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 0);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (byte) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, 4);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 10, (int) 'a', (int) '#', intArray92, true);
        java.lang.Class<?> wildcardClass95 = intArray92.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 4);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 2, 3, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (byte) 10, 1, (int) (byte) 1, intArray10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (int) 'a', 100, (int) (byte) 1, intArray80, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 100);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, (-1), (int) 'a', (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) (short) 1, 4, intArray88, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 0);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (byte) 10, 0, 100, intArray30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) '#');
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray28, false);
        int[] intArray35 = new int[] { '#' };
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray35, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (short) -1, 1, 2, intArray35, true);
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 10);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, 100);
        int int45 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 10, (int) (short) 1, 1, intArray43, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 0, (int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) '4');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1]");
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, 0);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) 'a');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (short) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (short) 10, 1, (int) '#', intArray66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 10);
        int[] intArray78 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray72, (int) (short) -1, (int) ' ', (int) (short) 1, intArray78, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) 'a');
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 100);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, 4);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray83, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 10, (int) '4', 10, intArray50, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 2);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) (short) 100, (int) ' ', 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 3, (int) (short) -1, (-1), intArray62, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '4');
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) (byte) 1, (int) (byte) 0, intArray66, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) '#', (int) (short) -1, 0, intArray16, false);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) 'a', 2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (short) 10);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) (byte) 10, (int) (short) 10, (-1), intArray68, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        java.lang.Class<?> wildcardClass73 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) 10);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, 10);
        java.lang.Class<?> wildcardClass86 = intArray27.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, (int) (short) -1, (int) (short) 100, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, 100);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, 1, (int) (byte) 1, (int) (short) -1, intArray39, false);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int[] intArray66 = new int[] { '#' };
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (short) -1, 1, 2, intArray66, true);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray39, (int) (short) 100, 0, 1, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 100);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray39, (int) '#', (int) (short) 100, (-1));
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, 100, (int) ' ', 0, intArray82, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) (short) 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { ' ', (byte) -1 };
        int[] intArray12 = new int[] { (-1), 100 };
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 1);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray14, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray22, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), (int) ' ', (int) (byte) 10, intArray22, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '4');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 10, (int) 'a', (-1), intArray36, true);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '#');
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) ' ');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (short) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 0, (int) (byte) 1, 3, intArray28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (byte) 10, (int) '4', 1);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) -1, 10, (int) (short) 0);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) (short) 1, (-1), (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, 10, (int) 'a', (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), 1, (-1), intArray36, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray20, (int) ' ', (int) 'a', (int) '4');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (short) 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, (int) 'a', 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, 3, (int) 'a', 0, intArray72, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray42, (int) 'a', 100, (int) (byte) 1, intArray62, false);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) '4');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) ' ', (int) (byte) 1, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 4, (int) '#', (int) (byte) 1, intArray62, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray54 = new int[] { ' ', (byte) -1 };
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (-1), (int) ' ', (int) (byte) 10, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) '4');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) 1, (int) ' ', 2, intArray78, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 100);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) -1);
        java.lang.Class<?> wildcardClass89 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 4);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 100);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, 3, 100, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '#');
        int[] intArray37 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) '#', 100, (int) (short) 0, intArray37, true);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray53 = new int[] { (-1), 100 };
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray47, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray55, false);
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) ' ');
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 0);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray61, (int) ' ', 10, 0);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (short) 10);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) '4');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 3);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 4);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray73, (int) (byte) 0, (int) (short) 0, 0);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) ' ', (int) (byte) 100, 100, intArray73, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray45 = new int[] { '#' };
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (short) -1, 1, 2, intArray45, true);
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 10);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, 0, 2, (int) (short) 1, intArray55, true);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (short) -1);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray61, 2, 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) '#', (int) ' ', (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        java.lang.Class<?> wildcardClass51 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 10);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 1, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) '4', 100, (int) '4', intArray70, false);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) 'a');
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, 2);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) ' ');
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) 'a');
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) ' ');
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray63, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (-1));
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (byte) 100);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray39, (int) (short) -1, 2, (int) (short) 10, intArray73, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { (-1), 100 };
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray29, (int) (byte) 1);
        int[] intArray37 = new int[] { (-1), 100 };
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray37, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray39, false);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int int47 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray43, 0, (-1), 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray19, (int) (short) 100, (int) (short) 0, (int) (short) 0, intArray43, true);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, 2);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray43, (int) (byte) 1);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 0);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) 'a');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) ' ');
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (-1));
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, 0, (int) (byte) 1, 1, intArray88, false);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) '4', (int) (byte) 100, 0);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 1]");
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (byte) 10, (int) '#', (int) ' ', intArray82, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) 10, (int) (byte) 0, (int) (short) -1, intArray54, true);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray19 = new int[] { 10 };
        int[] intArray21 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) '4');
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray21, 10, (int) (byte) 1, (int) (short) 0, intArray26, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 0, 0, 1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray3, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray3, (int) ' ');
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, 10, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[10]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 100, (int) 'a', (int) (short) -1);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, 100, 1, (int) (byte) 1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 100);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 4);
        java.lang.Class<?> wildcardClass83 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) (byte) -1, 4, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (-1));
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (byte) 1);
        java.lang.Class<?> wildcardClass33 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 0);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) -1, (int) (byte) -1, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 100, (int) '#', 3);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        java.lang.Class<?> wildcardClass37 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        int[] intArray86 = new int[] { (-1), 100 };
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray80, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray88, false);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) 'a');
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, 1, (int) (short) 10, (int) (short) 1, intArray94, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        java.lang.Class<?> wildcardClass45 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 10, 1, (int) (byte) -1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 4);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray24 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray24, false);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int[] intArray48 = new int[] { ' ', (byte) -1 };
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (-1), (int) ' ', (int) (byte) 10, intArray64, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, 0, (int) 'a', 4, intArray64, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (byte) 0, (int) '4', (int) (byte) 1, intArray64, true);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, 2);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) ' ');
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, (-1));
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, (int) (short) -1);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray87, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 100, (int) '#', (int) (byte) 1);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (byte) 100, 4, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) 10, (int) '4', 10, intArray70, true);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 100, (int) ' ', 1);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) 100, 0, (int) (short) 1, intArray82, false);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray82, (int) '#', 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 1]");
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (short) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray80, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (int) 'a', (int) (byte) 100, (int) (short) 10);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, 10, 0, intArray80, true);
        int int94 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 3);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray98 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[0, 1]");
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 2);
        int[] intArray60 = new int[] { ' ', (byte) -1 };
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, (-1), (int) ' ', (int) (byte) 10, intArray76, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray82, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray54, (int) (byte) 10, (int) '#', (int) ' ', intArray82, false);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (short) 10, (int) (byte) 0, (int) (short) -1, intArray54, true);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 100);
        java.lang.Class<?> wildcardClass93 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (short) 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) '#', (int) (short) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        java.lang.Class<?> wildcardClass85 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        java.lang.Class<?> wildcardClass31 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 4, 10, 0);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) -1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray44 = new int[] { ' ', (byte) -1 };
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (-1), (int) ' ', (int) (byte) 10, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray66, (int) (short) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        int[] intArray82 = new int[] { (-1), 100 };
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray76, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray84, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) 'a');
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) '#', (int) 'a', (int) '#', intArray90, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 0, 0, (-1), intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 0, 100, (int) (byte) 10, intArray66, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '4');
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, 1, (int) (byte) 1, (int) (short) -1, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 1, 0, 0, intArray62, false);
        java.lang.Class<?> wildcardClass71 = intArray62.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) 'a', 100, (int) (byte) 1, intArray54, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) '4');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) (short) -1, 0, intArray54, false);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 10, (int) (short) 100, (int) 'a', intArray54, true);
        java.lang.Class<?> wildcardClass71 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray81, (int) (short) 100);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray81, (int) (short) 10, (int) '4', (int) (short) 0);
        java.lang.Class<?> wildcardClass90 = intArray81.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) '#', (int) '#', 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, 2);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray80, 2);
        java.lang.Class<?> wildcardClass83 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int[] intArray50 = new int[] { ' ', (byte) -1 };
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (-1), (int) ' ', (int) (byte) 10, intArray66, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 0);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, 2, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) (byte) 10, (int) ' ', (int) (short) -1, intArray74, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, (int) (short) 100, 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 10);
        java.lang.Class<?> wildcardClass59 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 10, (int) '4', (int) (short) -1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, 1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) ' ');
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray85, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1]");
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, (int) '#', (int) (short) 0, intArray52, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 0);
        java.lang.Class<?> wildcardClass59 = intArray56.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, 4);
        java.lang.Class<?> wildcardClass29 = intArray13.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        java.lang.Class<?> wildcardClass59 = intArray46.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 100);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 4);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 4);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (byte) 10, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 10);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) 'a');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray69 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, 100, (int) '#', (int) (short) 10, intArray69, false);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, 0);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (short) -1, 0, (int) (byte) 0, intArray79, false);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) -1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (int) (short) 100, (int) '#', (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 100);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 10, (int) 'a', (-1), intArray46, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) 0, (int) (short) 10, (int) (byte) 0, intArray46, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 4, (int) (short) 10, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 2);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, 0, (int) (short) 0, intArray54, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 0, 4, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) '#');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 10);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 2);
        int[] intArray30 = new int[] { ' ', (byte) -1 };
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, (-1), (int) ' ', (int) (byte) 10, intArray46, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, 4, (int) '#', 1, intArray63, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) (short) 100, (int) '#', 0, intArray56, false);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int[] intArray16 = new int[] { ' ', (byte) -1 };
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (-1), (int) ' ', (int) (byte) 10, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) 'a', 100, (int) (byte) 1, intArray52, false);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (short) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) (byte) 0, (int) ' ', (int) (byte) 1, intArray84, true);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 1, 100, (int) (short) 0, intArray92, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray92, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 1]");
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) (short) 1, (-1), (int) (byte) 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, 10, (int) 'a', (int) (short) 10);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) '#');
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 100);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), 1, (-1), intArray26, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) 'a');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 0, (int) (byte) 100, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 100, (int) '4', (int) (byte) 1, intArray58, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, (int) (short) 100, (int) (byte) 1, 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) '#');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 1);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (-1), 1, (-1), intArray22, true);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) 'a');
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, (int) (byte) 100, (int) (short) 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray54, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 1, (int) (byte) 0, (int) (short) 100, intArray34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) 0, 0, 0);
        int[] intArray39 = new int[] { 10 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) '4');
        int[] intArray46 = new int[] { '#' };
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (short) 0);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, 10, (int) (byte) 1, (int) (short) 0, intArray46, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, 100, (int) (short) 100, 0, intArray46, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 1, (int) 'a', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 100, 100, 0, intArray80, false);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 10);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, (-1));
        java.lang.Class<?> wildcardClass91 = intArray88.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) 'a', 4, (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 100);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray41 = new int[] { '#' };
        int int43 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray41, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) -1, 1, 2, intArray41, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) -1, 0, (int) (short) 0, intArray41, true);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 100);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) ' ', (int) (short) 1, (int) (short) 1);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, 2, (int) (short) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 4);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) '4');
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 1, (int) (byte) 1, (int) (short) -1, intArray64, false);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray64, 10, 100, (int) '#');
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) (byte) 0);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, 1, 10, (int) (byte) 0, intArray86, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, 10, 100, (int) '4', intArray64, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1, 1]");
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (short) -1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) (byte) -1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) ' ');
        int[] intArray42 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) 0, (int) (short) 1, (int) (byte) -1, intArray42, false);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 10, (int) 'a', (-1), intArray32, true);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) '#');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) ' ');
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 100);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 3, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray42, 1, (int) (byte) 100, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (byte) 1, 2, (int) (short) -1, intArray42, false);
        java.lang.Class<?> wildcardClass49 = intArray6.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, 100);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, 10, (int) 'a', (-1), intArray40, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 1, (int) (short) -1, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 0, (int) (short) 1, (int) (short) -1, intArray40, true);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 10, (int) (short) 100, 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) (short) 100, (int) (byte) 1, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray76, 1);
        java.lang.Class<?> wildcardClass85 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) (byte) 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        java.lang.Class<?> wildcardClass81 = intArray70.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, 10);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 100);
        java.lang.Class<?> wildcardClass33 = intArray30.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        int[] intArray0 = null;
        int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 100, (int) (byte) 1, 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) 100, 3, (int) (byte) 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, 0, (-1), 0);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray16, (int) (short) 100, (int) '#', (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) 0);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) ' ');
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) '4');
        int int57 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (int) (byte) -1);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray55, (-1));
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray55, (-1), (int) '#', 4);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (int) (short) 100, (int) (short) 10, (int) (byte) -1, intArray65, false);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray33, 0, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 1]");
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, (int) (byte) 0, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) 'a', (int) ' ', 1, intArray50, false);
        java.lang.Class<?> wildcardClass53 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (short) 0, (int) ' ', 0, intArray62, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray62, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) '4', (int) '4', (-1));
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 100);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) 'a');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray76, (int) 'a', (int) (byte) 100, (int) (short) 1);
        java.lang.Class<?> wildcardClass81 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (byte) 1, (int) (byte) 1, (int) (short) -1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, (int) (byte) 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, 0);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, 1, (int) ' ', (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 0, (int) '#', 2);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (-1));
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) '4');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray64, 1, (int) (byte) 1, (int) (short) -1, intArray70, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 10);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, 1, (int) (byte) 10, (int) (byte) 0, intArray78, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (short) 100);
        java.lang.Class<?> wildcardClass83 = intArray82.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (-1));
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        java.lang.Class<?> wildcardClass77 = intArray76.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 2, (int) (short) 0, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, 2);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 10);
        int[] intArray68 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (int) (byte) 0, (int) (short) 100, (int) (byte) -1, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) '#');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, 100, 2, 10, intArray76, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (short) 1, (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '#');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 1);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 4);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) -1);
        java.lang.Class<?> wildcardClass87 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int[] intArray56 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 100, 3, (int) (byte) 0, intArray56, true);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 0);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 100, (int) 'a', (int) (short) 0, intArray50, true);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (byte) 0);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (short) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, (int) ' ', (int) (byte) 10, (-1), intArray82, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 0);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (byte) 100);
        java.lang.Class<?> wildcardClass81 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) '#', (int) (short) 100, (-1));
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        java.lang.Class<?> wildcardClass78 = intArray32.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 2, (int) 'a', 4, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) 10, (int) (short) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 10);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray59 = new int[] { '#' };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray59, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (short) -1, 1, 2, intArray59, true);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (short) 100, 0, 1, intArray65, false);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (-1));
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 100);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (byte) 1, (-1), (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) ' ');
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, 100);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) '#');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (short) 100, (int) (short) 100, 4, intArray32, false);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) ' ', 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, 1);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) 1, (-1), 0, intArray63, false);
        java.lang.Class<?> wildcardClass68 = intArray63.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) 'a', (int) (short) 10);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) -1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 10);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (int) (short) -1, (int) (byte) -1, (int) (byte) 0, intArray38, true);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray79, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '4', (int) 'a', (int) (short) 1, intArray79, false);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (byte) 1, 0, 2, intArray79, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 1]");
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (-1));
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) '#');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) ' ');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 3, (int) (short) 1, 0, intArray42, false);
        java.lang.Class<?> wildcardClass49 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) 10, (int) '4', 10, intArray62, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 2);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 100, (int) ' ', 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) (byte) 0, 0, intArray74, true);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (-1), 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) ' ');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray30, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (-1));
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (-1), 100, 3, intArray30, true);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (short) -1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        java.lang.Class<?> wildcardClass41 = intArray38.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 10);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        java.lang.Class<?> wildcardClass41 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray13, 2);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray13, 100, 0, (int) (short) 0);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (short) 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 10);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) 'a');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 2);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 0);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, (int) (short) -1, (int) (short) 100, 100, intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 100, 2);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray14 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 0);
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray14, 0);
        int[] intArray20 = null;
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 10, (int) (short) 1, (int) (short) 0, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (int) 'a', (int) ' ', 1, intArray46, false);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray14, 10, (int) (byte) 100, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        int[] intArray0 = null;
        int[] intArray4 = null;
        int[] intArray10 = new int[] { ' ', (byte) -1 };
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, (-1), (int) ' ', (int) (byte) 10, intArray26, false);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) 'a');
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, 100, (int) (byte) 100, 10, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, 0, (int) (short) 10, (int) (short) -1, intArray4, false);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = null;
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 10, (int) (short) 1, (int) (short) 0, intArray52, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, 0, (int) '4', (int) (short) 10);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 0, (int) ' ', 1, intArray60, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) -1);
        java.lang.Class<?> wildcardClass65 = intArray60.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (short) 0, (int) 'a', 2);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 10, 100, (int) (short) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 0);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (short) 0, (int) (byte) 0, 1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) 'a', (int) ' ', 1, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 4);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray9 = new int[] { (-1), 100 };
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray9, (int) (byte) 1);
        int[] intArray17 = new int[] { (-1), 100 };
        int[] intArray19 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray17, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray11, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray19, false);
        int[] intArray26 = new int[] { '#' };
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray11, (int) (short) -1, 1, 2, intArray26, true);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 10);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 0);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        int[] intArray74 = new int[] { (-1), 100 };
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray68, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray76, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) 'a', 100, (int) (byte) 1, intArray76, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray56, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray3, (int) 'a', 10, 0, intArray34, false);
        java.lang.Class<?> wildcardClass89 = intArray3.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) (short) 1);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 100, (-1), 0);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) 'a');
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 10, 10, 0);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) '4', 1, (int) (short) 0, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray84, (int) '#', (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 1, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int[] intArray34 = new int[] { ' ', (byte) -1 };
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (-1), (int) ' ', (int) (byte) 10, intArray50, false);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) 'a', 100, (int) (byte) 1, intArray70, false);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, (int) '4');
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, (int) ' ', (int) (byte) 1, 0);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 100);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray84, 2);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) '4', 2, (int) '#', intArray84, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (byte) 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, 4, (int) (byte) 1, 0);
        int[] intArray26 = null;
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 0);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 4);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 10, (int) '#', (-1), intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 0, 3, 0, intArray26, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, 0);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 100);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) 'a');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) ' ');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 1);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (short) 1, (int) (byte) 0, (-1), intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 100);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (-1), (int) (short) 0, (int) (short) -1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 0);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 100);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, 1);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray62, (int) 'a', 4, (int) (byte) 1);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray62, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) -1, (int) (short) 1, (int) (short) 100, intArray62, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, 1);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (-1), 1, 2);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) ' ');
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) '#');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray61 = new int[] { '#' };
        int int63 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray61, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (short) -1, 1, 2, intArray61, true);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 10);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray34, (int) (byte) 0, (int) (short) 10, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 10, (int) '#', (int) (short) 10, intArray34, true);
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 3);
        java.lang.Class<?> wildcardClass78 = intArray34.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) 'a', (int) (byte) 100, (int) (short) 10);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 1, (int) (short) 100, 0, intArray48, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 100, (int) (byte) 100, (int) (byte) -1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 1);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        java.lang.Class<?> wildcardClass63 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, 100, (int) (byte) 100, 10);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 1);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), 100, 0, intArray48, false);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) '4', (int) 'a', 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, 2);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (int) (short) 1, 4, (-1), intArray64, false);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) '#');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (int) (short) -1, 100, 10);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (-1), 1, (int) (byte) 0, intArray36, true);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, (int) ' ');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray64, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) 'a');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (-1));
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', (int) 'a', 1, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 10);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray66 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 2, (int) '4', (int) (short) 0, intArray66, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, 0, (int) 'a', 2, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 4, (int) (byte) -1, 1, intArray78, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (-1));
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 10);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray88, 100);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, 10, 2, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray46, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray54, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 0);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray60, 0, 1, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) '4');
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray60, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) (byte) 0, (int) (short) 100, (int) (short) 0, intArray60, false);
        java.lang.Class<?> wildcardClass71 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 1, 0, (int) (byte) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray2, (int) (byte) 0, (int) '4', (int) (byte) 1);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) ' ');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 10);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 4);
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 100, (int) ' ', 4);
        int[] intArray65 = new int[] { 10 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) '4');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) ' ', (int) 'a', (int) '#', intArray69, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, (int) (short) 10, (int) (byte) 1, intArray69, false);
        java.lang.Class<?> wildcardClass74 = intArray69.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 10, (int) ' ', 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray27 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, 100, (int) '#', (int) (short) 10, intArray27, false);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 1);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) '4');
        int[] intArray71 = new int[] { (-1), 100 };
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray65, 1, (int) (byte) 1, (int) (short) -1, intArray71, false);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray35, 1, (int) (short) 1, 0, intArray71, false);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, 2);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray71, 4, (int) (short) -1, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (short) 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray25, 10);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        int[] intArray56 = new int[] { '#' };
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (short) -1, 1, 2, intArray56, true);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (-1), 0, (int) (short) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray25, 1, 2, (int) (short) 0, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (short) 10);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) '#');
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray50, (int) (byte) 10, 0, 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 3);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        int[] intArray1 = new int[] { 10 };
        int[] intArray3 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) '4');
        int[] intArray8 = new int[] { '#' };
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray3, 10, (int) (byte) 1, (int) (short) 0, intArray8, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 0);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) '#');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, 10, 0, (int) (byte) -1, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        java.lang.Class<?> wildcardClass59 = intArray58.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[10]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray4, 0);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 100);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) (byte) 0, 100, (int) (short) 1);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (int) (byte) 10, (int) (short) 1, 1, intArray46, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, (int) (byte) 1, (int) (byte) 1, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray46, 10, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, 2, 10, (int) (short) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (short) 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, (-1), (int) (short) 10, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 3);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, 3, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, 10, 100, (int) '#');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, 1, 10, (int) (byte) 0, intArray54, true);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (short) -1);
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) 0, 0, (int) (short) -1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '4');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray36, 10, 10, (int) (short) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        int[] intArray84 = new int[] { (-1), 100 };
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray78, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray86, false);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) ' ');
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) '4');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) '4', (int) '#', (int) (short) 1, intArray86, false);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) -1);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 10);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 4);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray30, 2);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) '#', 0, intArray36, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray14 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 2, (int) '4', (int) (short) 0, intArray14, true);
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, 0, (int) 'a', 2, intArray26, false);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 1, (int) (byte) 1, 1);
        int[] intArray40 = new int[] { ' ', (byte) -1 };
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray40, (-1), (int) ' ', (int) (byte) 10, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 100);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 100);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) '4');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray40, 0, 100, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 100, (int) (short) 1, 0, intArray40, true);
        java.lang.Class<?> wildcardClass75 = intArray40.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, 2, 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass85 = intArray80.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        int[] intArray30 = null;
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray38, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray46, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray30, 10, (int) (short) 1, (int) (short) 0, intArray52, false);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, 0, (int) '4', (int) (short) 10);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 0, (int) ' ', 1, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray28 = new int[] { ' ', (byte) -1 };
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray28, (-1), (int) ' ', (int) (byte) 10, intArray44, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 100, (int) (short) 100, (-1), intArray50, true);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray22, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) -1);
        int[] intArray74 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, 0, (int) (short) 100, (int) (byte) 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (byte) -1, 100, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 0, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) -1, (int) (short) 100, 2);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 10);
        java.lang.Class<?> wildcardClass75 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (int) (byte) 100, (int) '#', (int) (short) 0, intArray52, true);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (-1));
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int[] intArray58 = new int[] { ' ', (byte) -1 };
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray66, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray74, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray58, (-1), (int) ' ', (int) (byte) 10, intArray74, false);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, 100);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) '4');
        int[] intArray88 = new int[] { (-1), 100 };
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray82, 1, (int) (byte) 1, (int) (short) -1, intArray88, false);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray88, (int) (short) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) '#', (int) (short) 0, (int) (byte) -1, intArray94, true);
        int int98 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray94, (-1));
        java.lang.Class<?> wildcardClass99 = intArray94.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 2 + "'", int98 == 2);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 1);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) '4');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 0);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) 'a');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) ' ');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 10);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray66 = new int[] { ' ', (byte) -1 };
        int[] intArray72 = new int[] { (-1), 100 };
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 1);
        int[] intArray80 = new int[] { (-1), 100 };
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray74, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray82, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray66, (-1), (int) ' ', (int) (byte) 10, intArray82, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray82, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray60, 100, (int) (short) 100, (-1), intArray88, true);
        int[] intArray92 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, 1, 0, (int) (short) 100, intArray60, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 1]");
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, (int) (short) -1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 0);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, (int) (short) 10, 1, (int) (short) -1, intArray40, true);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) 10);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (short) 100);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 100, (int) '#', (int) (byte) 10, intArray78, false);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, 0);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, 100, 4, (int) (byte) 1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray78, (int) (short) 10, 1, (int) (byte) -1);
        java.lang.Class<?> wildcardClass91 = intArray78.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) '4', 2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray9 = new int[] { ' ', (byte) -1 };
        int[] intArray15 = new int[] { (-1), 100 };
        int[] intArray17 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray15, (int) (byte) 1);
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray17, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray25, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray9, (-1), (int) ' ', (int) (byte) 10, intArray25, false);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (short) 1);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) 'a');
        int int37 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, (-1), (int) (byte) 0, (int) (byte) 1, intArray31, false);
        int[] intArray45 = new int[] { (-1), 100 };
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 1);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) ' ');
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray57 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, 2, (int) '4', (int) (short) 0, intArray57, true);
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, 1, (int) (byte) 100, (int) (byte) 0, intArray49, false);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray49, 100, 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray24 = new int[] { ' ', (byte) -1 };
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray24, (-1), (int) ' ', (int) (byte) 10, intArray40, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 100);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, 1);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 1, 0, (int) (byte) 0);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        int[] intArray78 = new int[] { (-1), 100 };
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray72, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray80, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray80, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (short) 0, (int) ' ', 0, intArray84, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) 10, (int) (byte) 1, (int) (short) 1, intArray84, true);
        int[] intArray90 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray84, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 2, 100, 4, intArray84, false);
        java.lang.Class<?> wildcardClass93 = intArray84.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 100);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray10, (int) ' ', (int) '#', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray70, 2, 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int28 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (short) 10, (int) (short) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (byte) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, 100, (int) (short) 0, (int) (byte) 0, intArray74, true);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 0);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 1);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray86, (int) (short) -1);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray29 = new int[] { ' ', (byte) -1 };
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, (-1), (int) ' ', (int) (byte) 10, intArray45, false);
        int int51 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray45, (int) (short) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        int[] intArray65 = new int[] { (-1), 100 };
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray59, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray67, false);
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) 'a');
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, (int) ' ');
        int[] intArray75 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray73, (int) (byte) 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray75, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray45, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray75, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (byte) -1, 2, (int) (byte) 0, intArray45, false);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray85 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 3);
        java.lang.Class<?> wildcardClass86 = intArray19.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 0, 2, (int) (short) -1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, 1, (int) 'a', (int) (byte) -1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) 'a');
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) 'a');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) ' ');
        int int62 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray58, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (-1));
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) (short) 1);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, 1, 10, (int) (byte) 0, intArray58, true);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray58, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 0);
        java.lang.Class<?> wildcardClass77 = intArray74.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        int[] intArray1 = new int[] { '#' };
        int int3 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray1, (int) (short) 0);
        int[] intArray7 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray1, 100, 0, (int) (short) -1, intArray7, false);
        int[] intArray11 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray1, (int) (byte) -1);
        int[] intArray17 = new int[] { ' ', (byte) -1 };
        int[] intArray23 = new int[] { (-1), 100 };
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray23, (int) (byte) 1);
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray25, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray33, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, (-1), (int) ' ', (int) (byte) 10, intArray33, false);
        int[] intArray39 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray33, 1);
        int int41 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray39, (int) (short) 1);
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) 'a');
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        int[] intArray57 = new int[] { (-1), 100 };
        int[] intArray59 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray51, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray59, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) ' ', (int) (short) -1, (int) (short) 1);
        int int67 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) '#');
        int int71 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, (int) (short) -1, 100, 10);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray51, 4, (int) ' ', (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (-1), 1, (int) (byte) 0, intArray51, true);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 0);
        int int81 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray51, (int) (byte) 10);
        int[] intArray83 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray11, (int) '4', (int) (byte) 100, (int) (short) 0, intArray83, true);
        java.lang.Class<?> wildcardClass86 = intArray83.getClass();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[35]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray32, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) ' ');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 1, (int) 'a', 0, intArray38, true);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 100);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) ' ');
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) 10, 10, 4, intArray64, false);
        java.lang.Class<?> wildcardClass71 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 3);
        java.lang.Class<?> wildcardClass87 = intArray86.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) (short) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray25 = new int[] { 10 };
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) '4');
        int[] intArray32 = new int[] { '#' };
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 0);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, 10, (int) (byte) 1, (int) (short) 0, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (int) (byte) 1, 0, (-1), intArray27, true);
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) -1, (int) (short) 100, 4, intArray46, true);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray46, 4);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 2, 10, (int) (byte) -1, intArray46, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[10]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 100, 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (short) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) '#', (int) 'a', (int) '#', intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 10, 100, (int) (short) 1);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, (int) (short) 0, (int) (byte) 10, 1);
        int int60 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (byte) 10);
        java.lang.Class<?> wildcardClass61 = intArray48.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 10);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, 0);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (byte) 100);
        java.lang.Class<?> wildcardClass31 = intArray26.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int[] intArray35 = new int[] { (-1), 100 };
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray35, (int) (byte) 1);
        int[] intArray43 = new int[] { (-1), 100 };
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray43, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray37, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray45, false);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) 'a');
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) ' ');
        int[] intArray53 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, (int) (byte) 10);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray53, (int) ' ');
        int[] intArray61 = new int[] { (-1), 100 };
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray61, (int) (byte) 1);
        int[] intArray69 = new int[] { (-1), 100 };
        int[] intArray71 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray63, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray71, false);
        int[] intArray78 = new int[] { '#' };
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray78, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray63, (int) (short) -1, 1, 2, intArray78, true);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 10);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, 0);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray53, 0, 2, (int) (short) 1, intArray88, true);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray29, 100, (int) '4', (int) ' ', intArray53, false);
        java.lang.Class<?> wildcardClass93 = intArray29.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (-1), 2, (int) (byte) -1);
        int[] intArray34 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray34, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray26, (int) (short) 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray63 = new int[] { '#' };
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray63, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (short) -1, 1, 2, intArray63, true);
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (int) (short) -1, 0, 1, intArray69, false);
        int int75 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray69, 100, (int) '4', 10);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) (byte) 100);
        int[] intArray79 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray77, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1]");
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray48, 10, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, 4);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) '#');
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray28, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        int[] intArray2 = new int[] { 1, 'a' };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) ' ');
        int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray20 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 2, (int) '4', (int) (short) 0, intArray20, true);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray12, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray12, 0, (int) 'a', 2, intArray32, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, (int) '4', 10, 1, intArray32, true);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1, 97]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray28, (int) (short) 10, (int) ' ', 0);
        java.lang.Class<?> wildcardClass33 = intArray28.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) (byte) 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) -1);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, 0);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray16, false);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) 'a');
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) ' ');
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 10);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (-1));
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 10, (int) (short) 10, 4);
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray42, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray50, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) '4');
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 2);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, 0, (int) (byte) 100, (int) (short) 1, intArray56, true);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray56, (int) '4', 1, (int) (byte) 1);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray56, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray0, (int) (short) 10, (int) (byte) 10, (int) '4', intArray56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) (short) 10);
        int[] intArray56 = new int[] { ' ', (byte) -1 };
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (-1), (int) ' ', (int) (byte) 10, intArray72, false);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, 100);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 100);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray80, (-1), 2, (int) (byte) -1);
        int[] intArray88 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray80, (int) (short) 1, (int) (byte) 100, (int) (byte) -1, intArray88, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (byte) 1, (int) (short) 100, 2, intArray80, true);
        int[] intArray94 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (short) 1);
        int int96 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray94, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray31 = new int[] { (-1), 100 };
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (byte) 1);
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray33, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray41, false);
        int[] intArray45 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) ' ');
        int[] intArray47 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray45, (int) (byte) 0);
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int int53 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray47, (int) ' ', 10, 0);
        int[] intArray55 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (short) 10);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) '4');
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 0, (int) 'a', (int) (byte) 1, intArray57, true);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (byte) 1);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray63, (int) (short) 10);
        int int69 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray65, 0, (int) (short) 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray10, 10);
        int[] intArray18 = new int[] { ' ', (byte) -1 };
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (-1), (int) ' ', (int) (byte) 10, intArray34, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray10, 0, (int) 'a', 4, intArray34, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 2);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray42, (int) '4');
        java.lang.Class<?> wildcardClass45 = intArray42.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '#');
        int[] intArray62 = new int[] { ' ', (byte) -1 };
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray62, (-1), (int) ' ', (int) (byte) 10, intArray78, false);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 100);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, (-1), 2, (int) (byte) -1);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) ' ', (int) 'a', (int) (short) 10, intArray86, true);
        int[] intArray96 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) '#');
        java.lang.Class<?> wildcardClass97 = intArray54.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '4');
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 2);
        java.lang.Class<?> wildcardClass29 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 100);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '4');
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (short) 10);
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) ' ');
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, 0, (int) '#', 0, intArray60, false);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (short) 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) ' ', 10, 0);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (short) 10);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) '4');
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray44, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 0);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (-1));
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, (int) ' ', (int) 'a', 1, intArray74, false);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, (int) '#');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (-1), 1, 0, intArray50, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray50, 2);
        java.lang.Class<?> wildcardClass85 = intArray50.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 10);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray62, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray70, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) 'a');
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) ' ');
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) (byte) 1);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, 100, (int) (short) 0, (int) (byte) 0, intArray74, true);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, (-1), 2, (int) (short) -1);
        int[] intArray18 = new int[] { (-1), 100 };
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 1);
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) ' ');
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) 1, (-1), (int) (byte) 0);
        int[] intArray30 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, 2, (int) '4', (int) (short) 0, intArray30, true);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray22, (int) (short) -1, (int) ' ', (int) (byte) 1);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) '#');
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (int) (short) -1, 100, (int) ' ', intArray40, true);
        int int44 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 0);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (byte) -1);
        int int48 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) 0);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) ' ');
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray74, (int) ' ');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 100);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) '#', (int) (short) 10, 0, intArray20, false);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 4);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        int[] intArray64 = new int[] { (-1), 100 };
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray58, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray66, false);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) 'a');
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) ' ');
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray72, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (-1));
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 1);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 0);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 100, (int) '4', 0, intArray72, false);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray88, 3, (int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray25, 1, (int) (short) 1, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray25, (int) (byte) 100);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) '4');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 0);
        int[] intArray33 = new int[] { ' ', (byte) -1 };
        int[] intArray39 = new int[] { (-1), 100 };
        int[] intArray41 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray39, (int) (byte) 1);
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray41, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray49, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray33, (-1), (int) ' ', (int) (byte) 10, intArray49, false);
        int[] intArray59 = new int[] { (-1), 100 };
        int[] intArray61 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray59, (int) (byte) 1);
        int[] intArray67 = new int[] { (-1), 100 };
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray61, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray69, false);
        int[] intArray73 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray69, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray49, (int) 'a', 100, (int) (byte) 1, intArray69, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray27, (int) (short) 0, (int) (byte) 1, (int) (short) 1, intArray49, true);
        int int79 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) -1);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (int) (byte) 10);
        int int87 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray27, 0, (int) '#', 2);
        int int89 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray27, (-1));
        int[] intArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) (byte) 100, (int) (short) -1, (-1), intArray93, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray20, (int) (byte) -1);
        int[] intArray27 = new int[] { 10 };
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray27, (int) '4');
        int[] intArray35 = new int[] { ' ', (byte) -1 };
        int[] intArray41 = new int[] { (-1), 100 };
        int[] intArray43 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 1);
        int[] intArray49 = new int[] { (-1), 100 };
        int[] intArray51 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray49, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray43, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray51, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray35, (-1), (int) ' ', (int) (byte) 10, intArray51, false);
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray51, 0);
        int int59 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, (int) (byte) 0);
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray57, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray27, (int) '#', (int) (byte) 1, (int) (byte) -1, intArray57, false);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray57, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray20, (int) (byte) 1, (int) '#', 100, intArray57, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (-1));
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) -1);
        int[] intArray75 = new int[] { '#' };
        int int77 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray68, 0, (int) (short) 10, (int) (short) -1, intArray75, true);
        int int83 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray75, 2, (int) (byte) 10, (int) (short) -1);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray75, (int) '#');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) -1);
        int[] intArray14 = new int[] { (-1), 100 };
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, (int) (byte) 1);
        int[] intArray22 = new int[] { (-1), 100 };
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray22, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray16, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray24, false);
        int[] intArray32 = new int[] { ' ', (byte) -1 };
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray32, (-1), (int) ' ', (int) (byte) 10, intArray48, false);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        int[] intArray66 = new int[] { (-1), 100 };
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray60, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray68, false);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray48, (int) 'a', 100, (int) (byte) 1, intArray68, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, 10, (int) (short) 0, (int) (short) -1, intArray48, true);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, 10);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int[] intArray84 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 100);
        int int90 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, 1, (int) (byte) 1, (int) (short) 0);
        int int92 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray8, 3, 3, (-1), intArray86, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int12 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 10, (int) ' ', 10);
        int[] intArray17 = new int[] { '#' };
        int int19 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray17, (int) (short) 0);
        int[] intArray23 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray17, 100, 0, (int) (short) -1, intArray23, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray6, (int) (short) -1, (int) (short) 1, (-1), intArray17, true);
        int[] intArray29 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 1);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int35 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, 0, (int) (byte) 10, (int) (byte) -1);
        int[] intArray37 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1]");
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 100);
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray26, (int) (short) 10, (-1), (int) (short) 1);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int int34 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (short) 10);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray32, (int) (short) -1, 100, (int) (short) 0);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray4, (int) (short) 1, (int) (short) 100, (int) (byte) -1);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 100);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (-1));
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        int[] intArray58 = new int[] { (-1), 100 };
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray60, false);
        int[] intArray68 = new int[] { (-1), 100 };
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (byte) 1);
        int[] intArray76 = new int[] { (-1), 100 };
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray76, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray70, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray78, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray52, (int) (byte) 10, (int) '4', 10, intArray78, true);
        int int84 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray52, (int) (byte) -1);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 4);
        int[] intArray88 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, 4, (int) (short) -1, (int) '#', intArray52, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1]");
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, 0);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 100);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 0);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (short) 0);
        int[] intArray78 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, 10);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray78, (-1));
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 4);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 0, (int) (short) 10, (int) (short) 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (short) 100, (int) ' ', 4);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) -1, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { ' ', (byte) -1 };
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, (-1), (int) ' ', (int) (byte) 10, intArray36, false);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray56, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (int) 'a', 100, (int) (byte) 1, intArray56, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray4, 10, (int) (short) 0, (int) (short) -1, intArray36, true);
        int int66 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray36, (int) 'a');
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) -1);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, 0);
        java.lang.Class<?> wildcardClass71 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) '#');
        int[] intArray14 = new int[] { ' ', (byte) -1 };
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray14, (-1), (int) ' ', (int) (byte) 10, intArray30, false);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray14, 100);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) '4');
        int[] intArray44 = new int[] { (-1), 100 };
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, 1, (int) (byte) 1, (int) (short) -1, intArray44, false);
        int[] intArray54 = new int[] { (-1), 100 };
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray54, (int) (byte) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray64, false);
        int[] intArray71 = new int[] { '#' };
        int int73 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray71, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray56, (int) (short) -1, 1, 2, intArray71, true);
        int[] intArray77 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray71, 10);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray44, (int) (short) 100, 0, 1, intArray77, false);
        int[] intArray81 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 100);
        int int85 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) '#', (int) (short) 100, (-1));
        int[] intArray87 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (short) 100);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray8, (-1), 2, 0, intArray44, true);
        int int91 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, (int) '4');
        int[] intArray93 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) 'a');
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1]");
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) 'a');
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (-1));
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 10);
        int[] intArray37 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray19, (int) (short) 0, (int) (byte) 100, 0, intArray37, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) -1);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray44, 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) '#');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray16, (int) ' ');
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) ' ');
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 0);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) (byte) 1);
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (int) ' ', 10, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray16, (int) (short) 100, (int) (short) 0, (int) (byte) 1, intArray44, false);
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, 2);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 100);
        java.lang.Class<?> wildcardClass57 = intArray16.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) 'a');
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        int[] intArray24 = new int[] { (-1), 100 };
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray26, false);
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) 'a');
        int[] intArray36 = new int[] { ' ', (byte) -1 };
        int[] intArray42 = new int[] { (-1), 100 };
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) (byte) 1);
        int[] intArray50 = new int[] { (-1), 100 };
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray44, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray52, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray36, (-1), (int) ' ', (int) (byte) 10, intArray52, false);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray70 = new int[] { (-1), 100 };
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray64, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray72, false);
        int[] intArray76 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray52, (int) 'a', 100, (int) (byte) 1, intArray72, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray26, (int) (short) 100, (int) 'a', (int) (short) 0, intArray52, true);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray2, 4, (int) (byte) -1, 0, intArray26, true);
        int[] intArray86 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 4);
        int int88 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray86, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int92 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray86, 3, 1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) -1, 0, (int) (short) 0);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) '#');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 100);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 0);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) (byte) 0);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1]");
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int int8 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 0);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 2);
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (int) (byte) 1, 3, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 1]");
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int int27 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) -1);
        int int29 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (byte) -1);
        int[] intArray31 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 1);
        int int33 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray31, (int) (byte) 10);
        int[] intArray35 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray31, (int) (short) -1);
        int[] intArray41 = new int[] { ' ', (byte) -1 };
        int[] intArray47 = new int[] { (-1), 100 };
        int[] intArray49 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray47, (int) (byte) 1);
        int[] intArray55 = new int[] { (-1), 100 };
        int[] intArray57 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray55, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray49, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray57, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray41, (-1), (int) ' ', (int) (byte) 10, intArray57, false);
        int[] intArray63 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, 100);
        int[] intArray65 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray41, (int) (byte) 100);
        int[] intArray67 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray65, (int) 'a');
        int[] intArray69 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray67, 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray31, (int) 'a', (int) (byte) 100, 4, intArray69, false);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 1]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1]");
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-1), 100 };
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (byte) 1);
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) ' ');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, (int) (short) 100);
        int int14 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray6, 1);
        int int18 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray6, (-1), 1, 2);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray0, (-1), (int) ' ', 0, intArray20, true);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, 3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int int38 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, 1);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) ' ');
        int int42 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray32, (int) (byte) -1);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) '4');
        java.lang.Class<?> wildcardClass45 = intArray44.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (short) 100);
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 10);
        int[] intArray26 = new int[] { (-1), 100 };
        int[] intArray28 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, (int) (byte) 1);
        int[] intArray34 = new int[] { (-1), 100 };
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray28, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray36, false);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) 'a');
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) ' ');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray20, 100, (int) (short) 100, (int) 'a', intArray40, true);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray40, 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray19 = new int[] { '#' };
        int int21 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray19, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (short) -1, 1, 2, intArray19, true);
        int[] intArray25 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 10);
        int[] intArray27 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, 100);
        int int31 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray19, (-1), 0, (int) (short) -1);
        int[] intArray33 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray19, (int) (byte) -1);
        java.lang.Class<?> wildcardClass34 = intArray33.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) ' ');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, 0, 1, (-1));
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray18, (int) (byte) 10, (int) (short) 1, 0);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray57 = new int[] { (short) 100, (short) 0, 100, (byte) -1, 10 };
        int int61 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray57, 1, (int) (byte) 100, (int) (short) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray48, 100, (int) '#', (int) (short) 10, intArray57, false);
        int int65 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray48, 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) (short) 100, 1, (int) (byte) 0, intArray48, true);
        int[] intArray72 = new int[] { '#' };
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, (int) (short) 0);
        int[] intArray78 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray72, 100, 0, (int) (short) -1, intArray78, false);
        int[] intArray82 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray72, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) ' ', 100, (int) (short) -1, intArray72, true);
        int int86 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        java.lang.Class<?> wildcardClass87 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, 0, 100, -1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, 0);
        java.lang.Class<?> wildcardClass71 = intArray12.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray20 = new int[] { (-1), 100 };
        int[] intArray22 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray20, (int) (byte) 1);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray22, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray30, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) 10, (int) '4', 10, intArray30, true);
        int[] intArray36 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, 2);
        int[] intArray40 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray36, (int) (short) 10, (int) (byte) 1, (int) (short) 0, intArray40, false);
        java.lang.Class<?> wildcardClass43 = intArray36.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) ' ');
        int[] intArray11 = new int[] { 10 };
        int[] intArray13 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray11, (int) '4');
        int[] intArray18 = new int[] { '#' };
        int int20 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 0);
        int int22 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray13, 10, (int) (byte) 1, (int) (short) 0, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray6, (int) (byte) 1, 0, (-1), intArray13, true);
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray42, (int) 'a');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) ' ');
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 10);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray50, (int) ' ');
        int int56 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray52, (int) (byte) 0, (int) ' ', (int) (byte) 0);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray13, 0, 4, (int) (short) 0, intArray52, false);
        int[] intArray60 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray13, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[10]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1]");
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray18, (int) 'a', 100, (int) (byte) 1, intArray38, false);
        int int46 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, (int) '4');
        int int50 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray38, (int) ' ', (int) (byte) 1, 0);
        int int52 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 0);
        int int54 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray38, 100);
        int[] intArray56 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (short) 1);
        int[] intArray62 = new int[] { (-1), 100 };
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, (int) (byte) 1);
        int[] intArray66 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray64, (int) (short) 10);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, 10);
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray66, (int) (short) 1);
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray70, 10);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) 100);
        int int78 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray74, 0, (int) 'a', 4);
        int[] intArray80 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray74, (int) (byte) -1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray56, (int) '4', 3, (-1), intArray74, true);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 1]");
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 0);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (byte) 0);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int int32 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, 3, 100, (int) (byte) -1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        int[] intArray46 = new int[] { (-1), 100 };
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray48, false);
        int[] intArray52 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) ' ');
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 0);
        int int58 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray54, 0, 1, (-1));
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray24, (int) (short) 10, 0, (int) (short) 0, intArray54, false);
        int int64 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray24, (int) (byte) 10, 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) ' ');
        int[] intArray20 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, (int) (byte) 10);
        int[] intArray26 = new int[] { ' ', (byte) -1 };
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        int[] intArray40 = new int[] { (-1), 100 };
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray34, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray42, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, (-1), (int) ' ', (int) (byte) 10, intArray42, false);
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray26, 100);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) '4');
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray50, 1, (int) (byte) 1, (int) (short) -1, intArray56, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (short) 10);
        int[] intArray64 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) (short) 0, (int) '#', (int) (byte) 1, intArray64, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 0);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) '#');
        int int72 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, 4);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray18, 1);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) (short) 1);
        int int28 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, (int) 'a');
        int int30 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray24, 0);
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) ' ');
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) (short) 1);
        int int36 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray34, (int) '4');
        int int40 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray34, (int) (short) 10, (int) (byte) 1, (int) (short) 0);
        int[] intArray42 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, 10);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray34, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray44, (-1), (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 1]");
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray6 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray4, (int) (short) 10);
        int[] intArray8 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray6, 10);
        int int10 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray8, (int) 'a');
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray8, 4, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray0, 2, (int) (byte) 0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int[] intArray26 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray24, (int) '4');
        int[] intArray32 = new int[] { (-1), 100 };
        int[] intArray34 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray26, 1, (int) (byte) 1, (int) (short) -1, intArray32, false);
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) (short) 10);
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray32, (int) 'a');
        int[] intArray46 = new int[] { ' ', (byte) -1 };
        int[] intArray52 = new int[] { (-1), 100 };
        int[] intArray54 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray52, (int) (byte) 1);
        int[] intArray60 = new int[] { (-1), 100 };
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray60, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray54, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray62, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray46, (-1), (int) ' ', (int) (byte) 10, intArray62, false);
        int[] intArray68 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray62, 1);
        int int70 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray40, 0, (int) ' ', (int) (short) -1, intArray68, false);
        int[] intArray74 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray68, (int) (short) 10);
        int int76 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, (int) (short) 10);
        int int80 = com.thealgorithms.misc.RangeInSortedArray.getLessThan(intArray68, (int) (short) 1, (int) (byte) 100, 3);
        int int82 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray68, 0);
        java.lang.Class<?> wildcardClass83 = intArray68.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        int[] intArray2 = new int[] { (-1), 100 };
        int[] intArray4 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, (int) (byte) 1);
        int[] intArray10 = new int[] { (-1), 100 };
        int[] intArray12 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray10, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray4, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray12, false);
        int[] intArray16 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, (int) 'a');
        int[] intArray22 = new int[] { ' ', (byte) -1 };
        int[] intArray28 = new int[] { (-1), 100 };
        int[] intArray30 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray28, (int) (byte) 1);
        int[] intArray36 = new int[] { (-1), 100 };
        int[] intArray38 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray36, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray30, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray38, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray22, (-1), (int) ' ', (int) (byte) 10, intArray38, false);
        int[] intArray48 = new int[] { (-1), 100 };
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        int[] intArray56 = new int[] { (-1), 100 };
        int[] intArray58 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray56, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray50, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray58, false);
        int[] intArray62 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray58, (int) 'a');
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray38, (int) 'a', 100, (int) (byte) 1, intArray58, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray12, (int) (short) 100, (int) 'a', (int) (short) 0, intArray38, true);
        int int68 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray12, (int) '4');
        int[] intArray70 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray12, 10);
        int[] intArray72 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray70, (int) (short) -1);
        int int74 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray72, 10);
        int[] intArray78 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray72, (int) (byte) 1, (int) (byte) 0, (int) (short) 10, intArray78, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int int24 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray18, (int) (short) 1);
        int[] intArray30 = new int[] { (-1), 100 };
        int[] intArray32 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray30, (int) (byte) 1);
        int[] intArray38 = new int[] { (-1), 100 };
        int[] intArray40 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray38, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray32, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray40, false);
        int[] intArray44 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray40, (int) 'a');
        int[] intArray46 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray44, (int) ' ');
        int[] intArray48 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray46, (int) (byte) 10);
        int[] intArray50 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray48, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) 'a', (int) (short) 10, (int) (byte) 0, intArray48, false);
        int[] intArray56 = null;
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray18, (int) ' ', (int) (short) 10, (int) (byte) -1, intArray56, false);
        java.lang.Class<?> wildcardClass59 = intArray18.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1]");
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        int[] intArray2 = new int[] { ' ', (byte) -1 };
        int[] intArray8 = new int[] { (-1), 100 };
        int[] intArray10 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray8, (int) (byte) 1);
        int[] intArray16 = new int[] { (-1), 100 };
        int[] intArray18 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray16, (int) (byte) 1);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearchIter(intArray10, (int) (byte) -1, (int) '#', (int) (byte) 10, intArray18, false);
        com.thealgorithms.misc.RangeInSortedArray.alteredBinSearch(intArray2, (-1), (int) ' ', (int) (byte) 10, intArray18, false);
        int[] intArray24 = com.thealgorithms.misc.RangeInSortedArray.sortedRange(intArray2, 100);
        int int26 = com.thealgorithms.misc.RangeInSortedArray.getCountLessThan(intArray2, (int) (short) -1);
        java.lang.Class<?> wildcardClass27 = intArray2.getClass();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[32, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 100]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }
}

